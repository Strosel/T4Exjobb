//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
typedef UDINT _FSM_TCP_USER;   //! <Type Comment="stepping switch for TCP/IP connection" Name="_FSM_TCP_USER"/>
    #define _STATE_INIT_SERVER 0
    #define _STATE_IDLE 1
    #define _STATE_MAIN_SOCK 2
    #define _STATE_LISTEN 3
    #define _STATE_ACCEPT 4
    #define _STATE_CONNECT 5
    #define _STATE_RECV 6
    #define _STATE_SHUTDOWN 7
    #define _STATE_CLOSE_MAIN_SOCK 8
    #define _STATE_CLOSE_SOCK 9
    #define _STATE_ERROR 10
    #define _STATE_ERROR_ALLOCATING_MEMORY 11
    #define _STATE_ERROR_CREATING_MUTEX 12
    #define _STATE_ERROR_CREATING_TASK 13
    #define _STATE_SEND 14
    #define _STATE_READ_RINGBUFFER 15
    #define _STATE_MAIN_SOCK_OPT 16
    #define _STATE_DEL_CONNECTION 17
    #define _STATE_CONN_SOCK_OPT 18

typedef UDINT DM_CPU_Types; 
    #define CPUNotIdentified 0
    #define IPC_Text_CPU 1
    #define IPC_800_CPU 2
    #define IPC_1024_CPU 3
    #define PCD_CPU 4
    #define DSE_CPU 5
    #define DCP_CPU 6
    #define DCC080_CPU 7
    #define DCP645_CPU 8
    #define AK500_CPU 9
    #define TSTROM_CPU 10
    #define NoCPU_11 11
    #define NoCPU_12 12
    #define NoCPU_13 13
    #define NoCPU_14 14
    #define NoCPU_15 15
    #define ELAN_CPU 16
    #define ELAN800_CPU 17
    #define WINPC_CPU 18
    #define TERMINAL_CPU 19
    #define DTC281_CPU 20
    #define ELAN_TEXT_CPU 21
    #define ELAN_800_CPU 22
    #define ETT321_CPU 23
    #define HERZ_CPU 24
    #define ETT261_CPU 25
    #define ETT431_CPU 26
    #define WIN_PC98_CPU 27
    #define WINPC_NT_CPU 28
    #define WINIPC_98_CPU 29
    #define WINIPC_NT_CPU 30
    #define IPC_320_CPU 31
    #define C_IPC_CPU 32
    #define NoCPU_33 33
    #define RK500_CPU 34
    #define CCL721_CPU 35
    #define CCL911_CPU 36
    #define BDF2000_CPU 37
    #define StandardPC_CPU 38
    #define CCL081CET_CPU 39
    #define CCL081_CPU 40
    #define CCL722_CPU 41
    #define DCL642_CPU 42
    #define Teachbox_CPU 43
    #define DTC081_CPU 44
    #define DTC081_IP_CPU 45
    #define ETV_CPU 46
    #define HZS511_CPU 47
    #define AUW11X_CPU 48
    #define BDF2000_USB_CPU 49
    #define DTC101_CPU 50
    #define HZS515_CPU 51
    #define CCP511_CPU 52
    #define ETVEDGE_CPU 53
    #define ARM_IMX6_CPU 65537

typedef struct   //! <Type Comment="Status Flag für IO Daten" Name="IO_FLAG"/>
  {
    short WrongHW : 1;  //! <Type Comment="Falsche Hardware verbunden" Name="IO_FLAG.WrongHW"/>
    short NoHW : 1;  //! <Type Comment="Keine Hardware verbunden" Name="IO_FLAG.NoHW"/>
    short NoCalibration : 1;  //! <Type Comment="Keine Kalibrierungsdaten im Modul-EEPROM" Name="IO_FLAG.NoCalibration"/>
    short ParaChkWrong : 1;  //! <Type Comment="Die Parameter-Checksumme ist falsch" Name="IO_FLAG.ParaChkWrong"/>
    short PhysicHiLimit : 1;  //! <Type Comment="IO ist am oberen physikalischen Limit" Name="IO_FLAG.PhysicHiLimit"/>
    short PhysicLoLimit : 1;  //! <Type Comment="IO ist am unteren physikalischen Limit" Name="IO_FLAG.PhysicLoLimit"/>
    short Invert : 1;  //! <Type Comment="Daten sind invertiert" Name="IO_FLAG.Invert"/>
    short dummy0 : 6;
    short OnDummyMode : 1;  //! <Type Comment="1 = Objekt ist im Dummymodus (nicht refreshed)" Name="IO_FLAG.OnDummyMode"/>
    short NotConnected : 1;  //! <Type Comment="1 = Objekt ist nicht verbunden" Name="IO_FLAG.NotConnected"/>
    short PhysicAccessOff : 1;  //! <Type Comment="1 = kein physikalischer Zugriff erlaubt" Name="IO_FLAG.PhysicAccessOff"/>
  }IO_FLAG;

#pragma pack(push, 1)
typedef struct IO_State 
  {
    IO_FLAG uiIO_Flags;
    UINT uiChNo;
  } IO_State;
#pragma pack(pop)

