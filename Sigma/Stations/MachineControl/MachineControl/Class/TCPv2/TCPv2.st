//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "TCPv2"
	Revision           = "0.0"
	GUID               = "{74040D20-46EA-4709-95A4-F7284A680132}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(376,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{EC4FB96A-BA61-4D27-996C-A63BF3C7555B}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="goOnline" GUID="{62FDD6B4-6C34-4F66-B38F-F97B946FD8E9}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="isOnline" GUID="{A74E89EE-C719-4EE0-9F4F-9C9B53C9022A}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="SendReturn" GUID="{356FE1F3-5ED8-4083-9672-910AE6FBFF18}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="Client" Required="true" Internal="true"/>
		<Client Name="cPort" Required="true" Internal="false" Comment="port number ... must be connected or initialized"/>
		<Client Name="ocIP" Required="true" Internal="false"/>
	</Channels>
	<Network Name="TCPv2">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name           = "Client"
				GUID           = "{1EFB09DD-6BF9-4138-8CB1-BC7A321F1BD5}"
				Class          = "_TCPIP_CLIENT"
				Position       = "(240,120)"
				Visualized     = "true"
				Remotely       = "true"
				CyclicTime     = "10 ms"
				BackgroundTime = "always">
				<Channels>
					<Server Name="Control"/>
					<Server Name="SemaName01"/>
					<Server Name="SemaName02"/>
					<Server Name="TaskName"/>
					<Client Name="cConfig"/>
					<Client Name="cMaxConnections" Value="1"/>
					<Client Name="co_MultiTask"/>
					<Client Name="co_SigCLib"/>
					<Client Name="co_StdLib"/>
					<Client Name="co_Task"/>
					<Client Name="cPort" Value="502"/>
					<Client Name="cSizeOfTXBuffer"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Client" Destination="Client.Control"/>
			<Connection Source="Client.cPort" Destination="this.cPort" Vertices="(240,210),(38,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
TCPv2 : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	goOnline 	: SvrCh_DINT;
	isOnline 	: SvrCh_DINT;
	SendReturn 	: SvrCh_DINT;
  //Clients:
	cPort 	: CltCh_DINT;
	Client 	: CltChCmd__TCPIP_CLIENT;
	ocIP 	: CltChCmd_String;
  //Variables:
		handle 	: DINT;
		IPaddr : ARRAY [0..20] OF CHAR;

  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL Send
		VAR_INPUT
			pData 	: ^void;
			udSize 	: UDINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL DataCallback
		VAR_INPUT
			pData 	: ^void;
			udSize 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL goOnline::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using _TCPIP_CLIENT
#pragma usingLtd String


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB TCPv2::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_TCPV2
0$UINT, 0$UINT, (SIZEOF(::TCPv2))$UINT, 
4$UINT, 3$UINT, 0$UINT, 
TO_UDINT(3399150631), "TCPv2", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::TCPv2.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::TCPv2.goOnline.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(724683202), "goOnline", 
(::TCPv2.isOnline.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2663722314), "isOnline", 
(::TCPv2.SendReturn.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1331416042), "SendReturn", 
//Clients:
(::TCPv2.cPort.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000110$UINT, TO_UDINT(2368846560), "cPort", 
(::TCPv2.Client.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(935117779), "Client", TO_UDINT(2629403047), "_TCPIP_CLIENT", 1$UINT, 17$UINT, 
(::TCPv2.ocIP.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3661562198), "ocIP", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
END_FUNCTION


#define USER_CNT_TCPv2 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_TCPv2] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION TCPv2::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_TCPv2, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
	vmt.CmdTable.CyWork		:= #CyWork();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #DataCallback();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	goOnline.pMeth			:= StoreMethod( #M_RD_DIRECT(), #goOnline::Write() );
	IF goOnline.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL TCPv2::DataCallback
	VAR_INPUT
		pData 	: ^void;
		udSize 	: UDINT;
	END_VAR
  
  TRACE("CALLBACK");

END_FUNCTION


FUNCTION VIRTUAL GLOBAL TCPv2::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR

  isOnline := Client.IsConnected(dHandle:=handle);
  
	state := READY;

END_FUNCTION


FUNCTION GLOBAL TCPv2::Send
	VAR_INPUT
		pData 	: ^void;
		udSize 	: UDINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: DINT;
	END_VAR
  
  retcode := Client.SendData(pData:=pData, udSize:=udSize, dHandle:=handle, bDirect:=0);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL TCPv2::goOnline::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	goOnline := input;
  
  if goOnline = 1 then
    handle := Client.AddConnection(pIPAddress:=#IPaddr[0], pCallbackThis:=this, pCallbackMeth:=#DataCallback(), udTimeout:=100);
  else
    Client.DelConnection(dHandle:=handle);
  end_if;

  
	result := goOnline;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL TCPv2::Init

  if _FirstScan then
    ocIP.ReadDataOff(udOff:=0, pData:=#IPaddr[0], udMax:=ocIP.GetLength());
  end_if;

END_FUNCTION
