//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION
#include "..\..\Class\SigCLib\CAtomic.h"

(*!
<Class
	Name               = "SigCLib"
	Revision           = "0.23"
	GUID               = "{69ACC408-CE36-4693-9B67-22204E53942F}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "true"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "libraryfunctions like memcpy, memmove, memcmp, strcpy, strcmp, strcat, etc. are enclosed to this class...&#13;&#10;">
	<Channels>
		<Server Name="ClassSvr" GUID="{D6FE9918-64B5-4BE5-B9D4-B221DE25BB94}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\SigCLib\SigCLib.h" Include="false"/>
			<File Path=".\Class\SigCLib\SigCLibNew.h" Include="false"/>
			<File Path=".\Class\SigCLib\DefineCompiler.h" Include="false"/>
			<File Path=".\Class\SigCLib\CAtomic.h" Include="true"/>
			<File Path=".\Class\SigCLib\CAtomic.cpp"/>
			<File Path=".\Class\SigCLib\CCrcLib.h" Include="false"/>
			<File Path=".\Class\SigCLib\CCrcLib.cpp"/>
			<File Path=".\Class\SigCLib\CFiFo.h" Include="false"/>
			<File Path=".\Class\SigCLib\CFiFo.cpp"/>
			<File Path=".\Class\SigCLib\CFileLib.h" Include="false"/>
			<File Path=".\Class\SigCLib\CFileLib.cpp"/>
			<File Path=".\Class\SigCLib\CMathLib.h" Include="false"/>
			<File Path=".\Class\SigCLib\CMathLib.cpp"/>
			<File Path=".\Class\SigCLib\CMemLib.h" Include="false"/>
			<File Path=".\Class\SigCLib\CMemLib.cpp"/>
			<File Path=".\Class\SigCLib\CNetworkLib.h" Include="false"/>
			<File Path=".\Class\SigCLib\CNetworkLib.cpp"/>
			<File Path=".\Class\SigCLib\CPipe.h" Include="false"/>
			<File Path=".\Class\SigCLib\CPipe.cpp"/>
			<File Path=".\Class\SigCLib\CPlcOnline.h" Include="false"/>
			<File Path=".\Class\SigCLib\CPlcOnline.cpp"/>
			<File Path=".\Class\SigCLib\CRingBuffer.h" Include="false"/>
			<File Path=".\Class\SigCLib\CRingBuffer.cpp"/>
			<File Path=".\Class\SigCLib\CSortLib.h" Include="false"/>
			<File Path=".\Class\SigCLib\CSortLib.cpp"/>
			<File Path=".\Class\SigCLib\CStdLib.h" Include="false"/>
			<File Path=".\Class\SigCLib\CStdLib.cpp"/>
			<File Path=".\Class\SigCLib\CStrLib.h" Include="false"/>
			<File Path=".\Class\SigCLib\CStrLibIntern.h" Include="false"/>
			<File Path=".\Class\SigCLib\CStrLib.cpp"/>
			<File Path=".\Class\SigCLib\CStrLib16.h" Include="false"/>
			<File Path=".\Class\SigCLib\CStrLib16.cpp"/>
			<File Path=".\Class\SigCLib\CSysLib.h" Include="false"/>
			<File Path=".\Class\SigCLib\CSysLib.cpp"/>
			<File Path=".\Class\SigCLib\CTimeLib.h" Include="false"/>
			<File Path=".\Class\SigCLib\CTimeLib.cpp"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="sigmatek" Author="kolott"/>
		<Dokumentation Revision="0.23" Date="2017-08-14" Author="kolott" Company="sigmatek" Description="Correction:&#13;&#10;Method RealToString() will work with values greater than 4294967295 and lower than -4294967295&#13;&#10;Method UnixTimeStampConvert() and function sigclib_gmtime() will work with 1st second of each 1st day in month.&#13;&#10;New functions added:&#13;&#10;sigclib_atomic_getU32(), sigclib_atomic_setU32(), sigclib_atomic_getS32(), sigclib_atomic_setS32()&#13;&#10;sa38620: Implementation of following functions changed&#13;&#10;sigclib64_sin(), sigclib64_cos(), sigclib64_tan(), sigclib64_asin(), sigclib64_acos(), sigclib64_atan()"/>
		<Dokumentation Revision="0.22" Date="2017-07-20" Author="kolott" Company="sigmatek" Description="New functions added:&#13;&#10;sigclib_atomic_incU32(), sigclib_atomic_decU32(), sigclib_atomic_addU32(), sigclib_atomic_subU32(), sigclib_atomic_swpU32(), sigclib_atomic_cmpxchgU32()&#13;&#10;sigclib_atomic_incS32(), sigclib_atomic_decS32(), sigclib_atomic_addS32(), sigclib_atomic_subS32(), sigclib_atomic_swpS32(), sigclib_atomic_cmpxchgS32()&#13;&#10;sigclib_absday(), sigclib_day_of_week(), sigclib_lasal_to_date(), sigclib_lasal_to_time(),&#13;&#10;sigclib_time_to_lasal(), sigclib_date_to_lasal(), sigclib_get_days_of_month(), sigclib_make_date()&#13;&#10;functionality of cPipe added"/>
		<Dokumentation Revision="0.21" Date="2017-07-05" Author="kolott" Company="sigmatek" Description="New Functions added:&#13;&#10;  sigclib_get_thisptr(), sigclib_htoa(), sigclib_mutex_name()&#13;&#10;Functionality of FiFo (cFiFo) added&#13;&#10;Functionality of RingBuffer (cRingBuffer) added"/>
		<Dokumentation Revision="0.20" Date="2017-04-11" Author="kolott" Company="sigmatek" Description="New Functions added: &#13;&#10;sigclib_memoryV1(), sigclib_mallocV1(), sigclib_callocV1(), sigclib_reallocV1(), sigclib_freeV1()"/>
		<Dokumentation Revision="0.19" Date="2017-02-01" Author="kolott" Company="sigmatek" Description="New Methods added:&#13;&#10;ToStr16(), ToStr08(), StrLen16(), StrCpy16(), StrCmp16(), StrCat16(), StrChr16(), StrUpr16(), StrLwr16(), StrStr16(), Str16ToUtf8(), Utf8ToStr16(), StrNCpy16()&#13;&#10;New Functions added:&#13;&#10;sigclib_crc64(), sigclib_u32ipaddress(), sigclib_str16_to_utf8(), sigclib_utf8_to_str16(), sigclib_string_to_time(), sigclib_serviceprovider(), sigclib_is_salamander(), sigclib_strncpy16(),"/>
		<Dokumentation Revision="0.18" Date="2016-11-17" Author="kolott" Company="sigmatek" Description="* SA36010: Library will work without &quot;InitOsiBase_new&quot;"/>
		<Dokumentation Revision="0.17" Date="2016-10-12" Author="kolott" Company="sigmatek" Description="Prototype of function sigclib_fseek() changed, offset is of type long instead of unsigned long&#13;&#10;CPlcOnline.cpp modul added&#13;&#10;new functions about Mutex added. look into CSysLib.h "/>
		<Dokumentation Revision="0.16" Date="2016-09-26" Author="kolott" Company="sigmatek" Description="new functions sigclib64_...() to ensure f64 operations added"/>
		<Dokumentation Revision="0.15" Date="2016-08-29" Author="kolott" Company="sigmatek" Description="new functions UnixTimeStampGet(), UnixTimeStampConvert() UnixTimeStampConvertU32(), UnixTimeStampReconvert() and UnixTimeStampReconvertU32() added.&#13;&#10;correction of syntaxerror &quot;bad suffix&quot; in file CStrLib.cpp"/>
		<Dokumentation Revision="0.14" Date="2016-06-06" Author="kolott" Company="sigmatek" Description="* sa34041: new Method LREALtoStr() and REALtoStr() added"/>
		<Dokumentation Revision="0.13" Date="2016-01-15" Author="kolott" Company="sigmatek" Description="* new functions sigclib_atan2(), sigclib_ceil(), sigclib_floor(), sigclib_pow(), sigclib_exp(), sigclib_fmod(), sigclib_log(), sigclib_log10(), sigclib_sprintf(), sigclib_filecreate() added&#13;&#10;* SA33745: error in unixtimestamp with date 29.02.2016 fixed"/>
		<Dokumentation Revision="0.12" Date="2015-07-20" Author="kolott" Company="sigmatek" Description="New Method FToA() added&#13;&#10;CMatLib.cpp added (sigclib_sin, sigclib_cos, sigclib_tan, sigclib_asin, sigclib_acos, sigclib_atan, sigclib_sqrt)&#13;&#10;CCrcLib.cpp added (sigclib_crc32)&#13;&#10;CStrLib16 added (sigclib_tostr16, sigclib_tostr08, sigclib_strlen16, sigclib_strcpy16, sigclib_strcmp16, sigclib_strcat16, sigclib_strchr16, sigclib_strupr16, sigclib_strlwr16, sigclib_strstr16)"/>
		<Dokumentation Revision="0.11" Date="2015-07-20" Author="kolott" Company="sigmatek" Description="new method SetSysTime() and SetSysDate() added&#13;&#10;new function sigclib_setsysdate() and sigclib_setsystime() added"/>
		<Dokumentation Revision="0.10" Date="2014-08-25" Author="kolott" Company="sigmatek" Description="* sa28421: new method StrToREAL() and StrToLREAL() added&#13;&#10;new function sigclib_strtod() and sigclib_atod() added"/>
		<Dokumentation Revision="0.9" Date="2014-04-24" Author="kolott" Company="sigmatek" Description="New Methods added:&#13;&#10;* StrToUL(), StrToL()&#13;&#10;* Memory(), Random(), GetSysTime(), GetSysDate()&#13;&#10;* StrCaseCmp(), StrNCaseCmp()&#13;&#10;New Functions added:&#13;&#10;* sigclib_strtol(), sigclib_strtoul(), sigclib_strtod()&#13;&#10;* sigclib_strcasecmp(), sigclib_strncasecmp(), sigclib_inet_ntoa(), sigclib_strftime()&#13;&#10;* sigclib_inet_addr(), sigclib_tracemessage()&#13;&#10;* sigclib_time(), sigclib_gmtime(), sigclib_timegm(), sigclib_mktime(), sigclib_ftime()&#13;&#10;* sigclib_srand(), sigclib_rand(), sigclib_random()&#13;&#10;* sigclib_tabsolute(), sigclib_getmicrotime(), sigclib_getsystime(), sigclib_getsysdate()&#13;&#10;* sigclib_qsort(), sigclib_bsearch()&#13;&#10;* sigclib_fopen(), sigclib_fclose(), sigclib_fread(), sigclib_fwrite(), sigclib_fseek(), sigclib_ftell()&#13;&#10;* sigclib_fgets(),  sigclib_flength(), sigclib_remove(), sigclib_rename()&#13;&#10;* sigclib_findfirst(), sigclib_findnext(), sigclib_findclose(), sigclib_mkdir(), sigclib_rmdir()&#13;&#10;* sigclib_malloc(), sigclib_realloc(), sigclib_free(), sigclib_memory() &#13;&#10;* sigclib_htonl(), sigclib_htons(), sigclib_ntohl(), sigclib_ntohs()"/>
		<Dokumentation Revision="0.8" Date="2013-04-04" Author="kolott" Company="sigmatek" Description="ARM-Ready"/>
		<Dokumentation Revision="0.7" Date="2012-10-17" Author="kolott" Company="sigmatek" Description="Changed the input parameter &quot;anz&quot; of the methods HFind and HSort to UDINT;"/>
		<Dokumentation Revision="0.6" Date="2012-07-20" Author="kolott" Company="sigmatek" Description="Added methods HSort and HFind;&#13;&#10;Fixed a bug in the function ItoA;"/>
		<Dokumentation Revision="0.5" Date="2012-07-16" Author="spimar" Company="sigmatek" Description="Fixed a bug in function memcpyrev;"/>
		<Dokumentation Revision="0.4" Date="2012-02-06" Author="hötant" Company="sigmatek" Description="prepare class for library"/>
		<Dokumentation Revision="0.3" Date="2012-01-19" Author="kolott" Company="sigmatek" Description="function memset will work with len = 0"/>
		<Dokumentation Revision="0.2" Date="2011-11-03" Author="kolott" Company="sigmatek" Description="function atof is added"/>
	</RevDoku>
</Class>
*)
SigCLib : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
  //Clients:
  //Variables:
  //Functions:
	
	FUNCTION SigCLib
		VAR_OUTPUT
			ret_code 	: ConfStates;
		END_VAR;
				//! <Function Comment="copy the string from the source&#13;&#10;to the destination array" Name="StrCpy"/>
	FUNCTION GLOBAL StrCpy
		VAR_INPUT
			dst0 	: ^CHAR;			//! <Variable Comment="pointer to the destination array" Name="StrCpy.dst0"/>
			src0 	: ^CHAR;			//! <Variable Comment="pointer to the source array" Name="StrCpy.src0"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^CHAR;			//! <Variable Comment="pointer to the destination array" Name="StrCpy.retcode"/>
		END_VAR;
				//! <Function Comment="concatenate two strings&#13;&#10;" Name="StrCat"/>
	FUNCTION GLOBAL StrCat
		VAR_INPUT
			ps1 	: ^CHAR;			//! <Variable Comment="Pointer to the destination array&#13;&#10;(large enough to contain the &#13;&#10;complete concatenated string)" Name="StrCat.ps1"/>
			ps2 	: ^CHAR;			//! <Variable Comment="Pointer to the source array &#13;&#10;which is appended" Name="StrCat.ps2"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^CHAR;			//! <Variable Comment="Pointer to the destination array" Name="StrCat.retcode"/>
		END_VAR;
				//! <Function Comment="Get string length" Name="StrLen"/>
	FUNCTION GLOBAL StrLen
		VAR_INPUT
			str 	: ^CHAR;			//! <Variable Comment="Pointer to the string" Name="StrLen.str"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: UDINT;			//! <Variable Comment="Length of the string" Name="StrLen.retcode"/>
		END_VAR;
				//! <Function Comment="Locate first occurrence of &#13;&#10;character in string" Name="StrChr"/>
	FUNCTION GLOBAL StrChr
		VAR_INPUT
			ps1 	: ^CHAR;			//! <Variable Comment="Pointer to the string" Name="StrChr.ps1"/>
			i 	: DINT;			//! <Variable Comment="Character to be located" Name="StrChr.i"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^CHAR;			//! <Variable Comment="Pointer to the first &#13;&#10;occurrence of character in str.&#13;&#10;If the value is not found, &#13;&#10;the function returns a &#13;&#10;null pointer.&#13;&#10;&#13;&#10;" Name="StrChr.retcode"/>
		END_VAR;
				//! <Function Comment="Compare two strings" Name="StrCmp"/>
	FUNCTION GLOBAL StrCmp
		VAR_INPUT
			ps1 	: ^CHAR;			//! <Variable Comment="Pointer to the first string" Name="StrCmp.ps1"/>
			ps2 	: ^CHAR;			//! <Variable Comment="Pointer to the second string" Name="StrCmp.ps2"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="A zero value indicates that &#13;&#10;both strings are equal.&#13;&#10;A value greater than zero &#13;&#10;indicates that the first &#13;&#10;character that does not match &#13;&#10;has a greater value in &#13;&#10;str1 than in str2; And a value &#13;&#10;less than zero indicates the &#13;&#10;opposite.&#13;&#10;&#13;&#10;" Name="StrCmp.retcode"/>
		END_VAR;
				//! <Function Comment="Converting a sting to upper-case" Name="StrUpr"/>
	FUNCTION GLOBAL StrUpr
		VAR_INPUT
			ps1 	: ^CHAR;			//! <Variable Comment="Pointer to the string &#13;&#10;to be converted" Name="StrUpr.ps1"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^CHAR;			//! <Variable Comment="Pointer to the converted string" Name="StrUpr.retcode"/>
		END_VAR;
				//! <Function Comment="Converting a sting to lower-case" Name="StrLwr"/>
	FUNCTION GLOBAL StrLwr
		VAR_INPUT
			ps1 	: ^CHAR;			//! <Variable Comment="Pointer to the string &#13;&#10;to be converted" Name="StrLwr.ps1"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^CHAR;			//! <Variable Comment="Pointer to the converted string" Name="StrLwr.retcode"/>
		END_VAR;
				//! <Function Comment="Returns a pointer to the &#13;&#10;first occurrence of &#13;&#10;str2 in str1, or a null &#13;&#10;pointer if str2 is not &#13;&#10;part of str1." Name="StrStr"/>
	FUNCTION GLOBAL StrStr
		VAR_INPUT
			searchee 	: ^CHAR;			//! <Variable Comment="Pointer to the string &#13;&#10;to be scanned" Name="StrStr.searchee"/>
			lookfor 	: ^CHAR;			//! <Variable Comment="Pointer to the string &#13;&#10;containing the sequence of &#13;&#10;characters to match." Name="StrStr.lookfor"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^CHAR;			//! <Variable Comment="A pointer to the first &#13;&#10;occurrence in str1 of any of &#13;&#10;the entire sequence of &#13;&#10;characters specified in str2, &#13;&#10;or a null pointer if the &#13;&#10;sequence is not present in str1." Name="StrStr.retcode"/>
		END_VAR;
				//! <Function Comment="Returns the length of the &#13;&#10;initial portion of str1 which &#13;&#10;consists only of characters &#13;&#10;that are part of str2.&#13;&#10;" Name="StrSpn"/>
	FUNCTION GLOBAL StrSpn
		VAR_INPUT
			ps1 	: ^CHAR;			//! <Variable Comment="Pointer to the string to be &#13;&#10;scanned. &#13;&#10;" Name="StrSpn.ps1"/>
			ps2 	: ^CHAR;			//! <Variable Comment="Pointer to the string &#13;&#10;containing the characters &#13;&#10;to match." Name="StrSpn.ps2"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="The length of the initial &#13;&#10;portion of str1 containing only &#13;&#10;characters that appear in str2." Name="StrSpn.retcode"/>
		END_VAR;
				//! <Function Comment="Copies the first &apos;count&apos; characters of &apos;src0&apos; to &apos;dst0&apos;. If the end of &apos;src0&apos; C string (which is signaled by a 0-character) is found before &apos;count&apos; characters have been copied, destination is padded with zeros until a total of &apos;count&apos; characters have been written to it.&#13;&#10;Note: No 0-character is implicitly appended at the end of &apos;dst0&apos; if &apos;src0&apos; is longer than &apos;count&apos;. Thus, in this case, destination shall not be considered a 0 terminated C string (reading it as such would overflow)." Name="StrNCpy"/>
	FUNCTION GLOBAL StrNCpy
		VAR_INPUT
			dst0 	: ^CHAR;			//! <Variable Comment="Pointer to the destination &#13;&#10;array where the content is to &#13;&#10;be copied. &#13;&#10;" Name="StrNCpy.dst0"/>
			src0 	: ^CHAR;			//! <Variable Comment="Pointer to the string to be copied" Name="StrNCpy.src0"/>
			count 	: UDINT;			//! <Variable Comment="Maximum number of characters to be copied from source. &#13;&#10;&#13;&#10;" Name="StrNCpy.count"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^CHAR;			//! <Variable Comment="Pointer to destination array." Name="StrNCpy.retcode"/>
		END_VAR;
				//! <Function Comment="Append characters from string&#13;&#10;&#13;&#10;" Name="StrNCat"/>
	FUNCTION GLOBAL StrNCat
		VAR_INPUT
			ps1 	: ^CHAR;			//! <Variable Comment="Pointer to the destination array, which have to contain a C string, &#13;&#10;and be large enough to contain the concatenated resulting string, &#13;&#10;including the additional null-character. &#13;&#10;" Name="StrNCat.ps1"/>
			ps2 	: ^CHAR;			//! <Variable Comment="Pointer to the string to be appended" Name="StrNCat.ps2"/>
			len 	: UDINT;			//! <Variable Comment="Maximum number of characters to be appeded" Name="StrNCat.len"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^CHAR;			//! <Variable Comment="Pointer to the destination array" Name="StrNCat.retcode"/>
		END_VAR;
				//! <Function Comment="Compare characters of two strings&#13;&#10;&#13;&#10;" Name="StrNCmp"/>
	FUNCTION GLOBAL StrNCmp
		VAR_INPUT
			ps1 	: ^CHAR;			//! <Variable Comment="Pointer to the first string to be compared" Name="StrNCmp.ps1"/>
			ps2 	: ^CHAR;			//! <Variable Comment="Pointer to the second string to be compared" Name="StrNCmp.ps2"/>
			count 	: UDINT;			//! <Variable Comment="Maximum number of characters to compare" Name="StrNCmp.count"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="Returns an integral value indicating the relationship &#13;&#10;between the strings:&#13;&#10;A zero value indicates that the characters compared &#13;&#10;in both strings are all equal.&#13;&#10;A value greater than zero indicates that the first &#13;&#10;character that does not match has a greater &#13;&#10;value in str1 than in str2; And a value less than zero indicates the opposite." Name="StrNCmp.retcode"/>
		END_VAR;
				//! <Function Comment="This function compares the two strings str1 and str2, ignoring the case of the characters.&#13;&#10;It returns an integer less than, equal to, or greater than zero if str1 is found, respectively, to be less than, to match, or be greater than str2." Name="StrCaseCmp"/>
	FUNCTION GLOBAL StrCaseCmp
		VAR_INPUT
			str1 	: ^CHAR;
			str2 	: ^CHAR;
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;
		END_VAR;
				//! <Function Comment="This function compares the first n characters of strings str1 and str2, ignoring the case of the characters.&#13;&#10;It returns an integer less than, equal to, or greater than zero if str1 is found, respectively, to be less than, to match, or be greater than str2" Name="StrNCaseCmp"/>
	FUNCTION GLOBAL StrNCaseCmp
		VAR_INPUT
			str1 	: ^CHAR;
			str2 	: ^CHAR;
			count 	: UDINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;
		END_VAR;
				//! <Function Comment="This function converts the initial part of the given string to a DINT value according to the given base,&#13;&#10;which must be between 2 and 36 inclusive, or be the special value 0." Name="StrToL"/>
	FUNCTION GLOBAL StrToL
		VAR_INPUT
			nptr 	: ^CHAR;
			endptr 	: ^pVoid;
			base 	: DINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;
		END_VAR;
				//! <Function Comment="This function converts the initial part of the given string to an UDINT value according to the given base,&#13;&#10;which must be between 2 and 36 inclusive, or be the special value 0.&#13;&#10;" Name="StrToUL"/>
	FUNCTION GLOBAL StrToUL
		VAR_INPUT
			nptr 	: ^CHAR;
			endptr 	: ^pVoid;
			base 	: DINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL StrToREAL
		VAR_INPUT
			nptr 	: ^CHAR;
			endptr 	: ^pVoid;
		END_VAR
		VAR_OUTPUT
			retcode 	: REAL;
		END_VAR;
	
	FUNCTION GLOBAL StrToLREAL
		VAR_INPUT
			nptr 	: ^CHAR;
			endptr 	: ^pVoid;
		END_VAR
		VAR_OUTPUT
			retcode 	: LREAL;
		END_VAR;
				//! <Function Comment="Fill block of memory" Name="MemSet"/>
	FUNCTION GLOBAL MemSet
		VAR_INPUT
			dst 	: ^void;			//! <Variable Comment="Pointer to the block of memory to fill" Name="MemSet.dst"/>
			c 	: DINT;			//! <Variable Comment="Value to be set" Name="MemSet.c"/>
			len 	: UDINT;			//! <Variable Comment="Number of bytes to be set to the value" Name="MemSet.len"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^void;			//! <Variable Comment="Pointer to the destination is returned." Name="MemSet.retcode"/>
		END_VAR;
				//! <Function Comment="Copy block of memory" Name="MemCpy"/>
	FUNCTION GLOBAL MemCpy
		VAR_INPUT
			dst0 	: ^void;			//! <Variable Comment="Pointer to the destination array where the content is to be copied" Name="MemCpy.dst0"/>
			src0 	: ^void;			//! <Variable Comment="Pointer to the source of data to be copied" Name="MemCpy.src0"/>
			len0 	: UDINT;			//! <Variable Comment="Number of bytes to copy. " Name="MemCpy.len0"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^void;			//! <Variable Comment="Pointer to the destination is returned" Name="MemCpy.retcode"/>
		END_VAR;
				//! <Function Comment="Move block of memory" Name="MemMove"/>
	FUNCTION GLOBAL MemMove
		VAR_INPUT
			dst0 	: ^void;			//! <Variable Comment="Pointer to the destination array where the content is to be copied" Name="MemMove.dst0"/>
			src0 	: ^void;			//! <Variable Comment="Pointer to the source of data to be copied" Name="MemMove.src0"/>
			len0 	: UDINT;			//! <Variable Comment="Number of bytes to copy" Name="MemMove.len0"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^void;			//! <Variable Comment="Pointer to the destination is returned" Name="MemMove.retcode"/>
		END_VAR;
				//! <Function Comment="Compare two blocks of memory" Name="MemCmp"/>
	FUNCTION GLOBAL MemCmp
		VAR_INPUT
			m1 	: ^void;			//! <Variable Comment="Pointer to the first block of memory" Name="MemCmp.m1"/>
			m2 	: ^void;			//! <Variable Comment="Pointer to the second block of memory" Name="MemCmp.m2"/>
			len 	: UDINT;			//! <Variable Comment="Number of bytes to compare. " Name="MemCmp.len"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="Returns an integral value indicating the relationship between the content of &#13;&#10;the memory blocks:&#13;&#10;A zero value indicates that the contents of both memory blocks are equal.&#13;&#10;A value greater than zero indicates that the first byte that does not match &#13;&#10;in both memory blocks has a greater value in ptr1 than in ptr2 as if evaluated &#13;&#10;as unsigned char values; And a value less than zero indicates the opposite." Name="MemCmp.retcode"/>
		END_VAR;
				//! <Function Comment="Locate character in block of memory&#13;&#10;&#13;&#10;" Name="MemChr"/>
	FUNCTION GLOBAL MemChr
		VAR_INPUT
			src 	: ^void;			//! <Variable Comment="Pointer to the block of memory where the search is performed." Name="MemChr.src"/>
			c 	: DINT;			//! <Variable Comment="Character to be located" Name="MemChr.c"/>
			length 	: UDINT;			//! <Variable Comment="Number of bytes to be analyzed" Name="MemChr.length"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^void;			//! <Variable Comment="A pointer to the first occurrence of value in the block of memory pointed by ptr.&#13;&#10;If the value is not found, the function returns NULL." Name="MemChr.retcode"/>
		END_VAR;
				//! <Function Comment="Compare two blocks of memory&#13;&#10;(not case sensitive)" Name="MemICmp"/>
	FUNCTION GLOBAL MemICmp
		VAR_INPUT
			ps1 	: ^void;			//! <Variable Comment="Pointer to the first block of memory" Name="MemICmp.ps1"/>
			ps2 	: ^void;			//! <Variable Comment="Pointer to the second block of memory" Name="MemICmp.ps2"/>
			length 	: UDINT;			//! <Variable Comment="Number of bytes to compare." Name="MemICmp.length"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="Returns an integral value indicating the relationship between &#13;&#10;the content of the memory blocks:&#13;&#10;A zero value indicates that the contents of both memory &#13;&#10;blocks are equal.&#13;&#10;A value greater than zero indicates that the first byte that &#13;&#10;does not match in both memory blocks has a greater value &#13;&#10;in ptr1 than in ptr2 as if evaluated as unsigned char values; &#13;&#10;And a value less than zero indicates the opposite." Name="MemICmp.retcode"/>
		END_VAR;
				//! <Function Comment="Check if the given value is a decimal number" Name="IsDigit"/>
	FUNCTION GLOBAL IsDigit
		VAR_INPUT
			c 	: DINT;			//! <Variable Comment="Character to be checked" Name="IsDigit.c"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="Returns &lt;&gt; 0 if character is a decimal number;&#13;&#10;Returns 0 if character is not a decimal number;" Name="IsDigit.retcode"/>
		END_VAR;
				//! <Function Comment="Checks a character if it is lower-case" Name="IsLower"/>
	FUNCTION GLOBAL IsLower
		VAR_INPUT
			c 	: DINT;			//! <Variable Comment="Character to be checked" Name="IsLower.c"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="Returns &lt;&gt; 0 if character is lower-case;&#13;&#10;Returns 0 if character is not lower-case;" Name="IsLower.retcode"/>
		END_VAR;
				//! <Function Comment="Checks a character if it is upper-case" Name="IsUpper"/>
	FUNCTION GLOBAL IsUpper
		VAR_INPUT
			c 	: DINT;			//! <Variable Comment="Character to be checked" Name="IsUpper.c"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="Returns &lt;&gt; 0 if character is upper-case;&#13;&#10;Returns 0 if character is not upper-case;" Name="IsUpper.retcode"/>
		END_VAR;
				//! <Function Comment="Converts a character to lower-case" Name="ToLower"/>
	FUNCTION GLOBAL ToLower
		VAR_INPUT
			c 	: DINT;			//! <Variable Comment="Character to be converted" Name="ToLower.c"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: CHAR;			//! <Variable Comment="Converted character" Name="ToLower.retcode"/>
		END_VAR;
				//! <Function Comment="Converts a character to upper-case" Name="ToUpper"/>
	FUNCTION GLOBAL ToUpper
		VAR_INPUT
			c 	: DINT;			//! <Variable Comment="Character to be converted" Name="ToUpper.c"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: CHAR;			//! <Variable Comment="Converted character" Name="ToUpper.retcode"/>
		END_VAR;
				//! <Function Comment="Convert string to value(INT)" Name="AToI"/>
	FUNCTION GLOBAL AToI
		VAR_INPUT
			ps1 	: ^CHAR;			//! <Variable Comment="Pointer to the string" Name="AToI.ps1"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="Converted value" Name="AToI.retcode"/>
		END_VAR;
				//! <Function Comment="Convert string to value" Name="AToL"/>
	FUNCTION GLOBAL AToL
		VAR_INPUT
			ps1 	: ^CHAR;			//! <Variable Comment="Pointer to the string" Name="AToL.ps1"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="Converted value" Name="AToL.retcode"/>
		END_VAR;
				//! <Function Comment="Convert string to float(REAL)" Name="AToF"/>
	FUNCTION GLOBAL AToF
		VAR_INPUT
			ps1 	: ^CHAR;			//! <Variable Comment="Pointer to the string" Name="AToF.ps1"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: REAL;			//! <Variable Comment="Converted value" Name="AToF.retcode"/>
		END_VAR;
				//! <Function Comment="Convert value to string" Name="IToA"/>
	FUNCTION GLOBAL IToA
		VAR_INPUT
			val 	: DINT;			//! <Variable Comment="Value to be converted" Name="IToA.val"/>
			dst 	: ^CHAR;			//! <Variable Comment="Pointer to the destination array" Name="IToA.dst"/>
			base 	: DINT;			//! <Variable Comment="Numerical base to represent the value as string" Name="IToA.base"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^CHAR;			//! <Variable Comment="Pointer to the destination array" Name="IToA.retcode"/>
		END_VAR;
				//! <Function Comment="sorts arbitrary array with userdefined length" Name="HSort"/>
	FUNCTION GLOBAL HSort
		VAR_INPUT
			src0 	: ^void;			//! <Variable Comment="pointer to first element of array to be sorted" Name="HSort.src0"/>
			anz 	: UDINT;			//! <Variable Comment="Number of elements in array pointed by src0" Name="HSort.anz"/>
			size 	: UDINT;			//! <Variable Comment="Size in bytes of each element in array" Name="HSort.size"/>
			pfunct 	: ^void;			//! <Variable Comment="Function that compares two elements. This function must be declared as global __cdecl and has to accept two parameters, each a pointer of type arrayelement and &#13;&#10;a signed 32bit returnvalue (dint) which determines the order of pointed elements. The return value of this function should represent whether element1 is considered less than, equal to, or greater than element2 by returning, respectively, a negative value, zero or a positive value.&#13;&#10;&#13;&#10;NOTE:&#13;&#10;It is not allowed to use other class variables in the give function than the input and output parameters!" Name="HSort.pfunct"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="greater 0 if array is sucessfully sorted" Name="HSort.retcode"/>
		END_VAR;
				//! <Function Comment="find index of element in arbitrary array sorted by HSort" Name="HFind"/>
	FUNCTION GLOBAL HFind
		VAR_INPUT
			src0 	: ^void;			//! <Variable Comment="pointer to the first element of the array to search" Name="HFind.src0"/>
			anz 	: UDINT;			//! <Variable Comment="Number of elements in the array pointed by src0" Name="HFind.anz"/>
			size 	: UDINT;			//! <Variable Comment="Size in bytes of each element in the array" Name="HFind.size"/>
			pfunct 	: ^void;			//! <Variable Comment="Function that compares two elements. This function must be declared as global __cdecl and has to accept two parameters, each a pointer of type arrayelement and a signed 32bit returnvalue (dint)&#13;&#10;which determines the order of pointed elements. The return value of this function should represent whether element1 is considered less than, equal to, or greater than element2 by returning, respectively, a negative value, zero or a positive value.&#13;&#10;this function is used to be the same than for function sort.&#13;&#10;&#13;&#10;NOTE:&#13;&#10;It is not allowed to use other class variables in the give function than the input and output parameters!" Name="HFind.pfunct"/>
			pvgl 	: ^void;			//! <Variable Comment="pointer to referenceelement, is used as parameter element1 in comparatorfunction" Name="HFind.pvgl"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;			//! <Variable Comment="a negative value if element not found in array, on the other hand the respectively index of element used to be found" Name="HFind.retcode"/>
		END_VAR;
				//! <Function Comment="function is used to alloc, realloc or free memory.&#13;&#10;the given pointer has to be initialized once by NIL otherwise you&apos;ll crash the system." Name="Memory"/>
	FUNCTION GLOBAL Memory
		VAR_INPUT
			pptr 	: ^pVoid;
			size 	: UDINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
				//! <Function Comment="will generate a random value between 0 and max-1" Name="Random"/>
	FUNCTION GLOBAL Random
		VAR_INPUT
			max 	: UDINT;			//! <Variable Comment="range of randomvalue: returned value can be from 0 to max-1" Name="Random.max"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: UDINT;			//! <Variable Comment="random value can be from 0 to max-1" Name="Random.retcode"/>
		END_VAR;
				//! <Function Comment="get systemtime" Name="GetSysTime"/>
	FUNCTION GLOBAL GetSysTime
		VAR_INPUT
			ptime 	: ^SYSTIME;
		END_VAR;
				//! <Function Comment="get systemdate" Name="GetSysDate"/>
	FUNCTION GLOBAL GetSysDate
		VAR_INPUT
			pdate 	: ^SYSDATE;
		END_VAR;
				//! <Function Comment="set systemtime" Name="SetSysTime"/>
	FUNCTION GLOBAL SetSysTime
		VAR_INPUT
			ptime 	: ^SYSTIME;
		END_VAR;
				//! <Function Comment="set systemdate" Name="SetSysDate"/>
	FUNCTION GLOBAL SetSysDate
		VAR_INPUT
			pdate 	: ^SYSDATE;
		END_VAR;
				//! <Function Comment="Format REAL value to ascii-0-string&#13;&#10;value ....... value&#13;&#10;dst ......... destination&#13;&#10;decimals .... number of decimals" Name="FToA"/>
	FUNCTION GLOBAL FToA
		VAR_INPUT
			value 	: REAL;			//! <Variable Comment="value to be converted" Name="FToA.value"/>
			dst 	: ^CHAR;			//! <Variable Comment="pointer to destination array" Name="FToA.dst"/>
			decimals 	: UDINT;			//! <Variable Comment="number of decimals" Name="FToA.decimals"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^CHAR;			//! <Variable Comment="pointer to destiantion array" Name="FToA.retcode"/>
		END_VAR;
				//! <Function Comment="Format REAL value to ascii-0-string&#13;&#10;dst ......... destination&#13;&#10;value ....... value&#13;&#10;decimals .... number of decimals" Name="REALtoStr"/>
	FUNCTION GLOBAL REALtoStr
		VAR_INPUT
			dst 	: ^CHAR;			//! <Variable Comment="pointer to destination array" Name="REALtoStr.dst"/>
			value 	: REAL;			//! <Variable Comment="value to be converted" Name="REALtoStr.value"/>
			decimals 	: UDINT;			//! <Variable Comment="number of decimals" Name="REALtoStr.decimals"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^CHAR;			//! <Variable Comment="pointer to destiantion array" Name="REALtoStr.retcode"/>
		END_VAR;
				//! <Function Comment="Format LREAL value to ascii-0-string&#13;&#10;dst ......... destination&#13;&#10;value ....... value&#13;&#10;decimals .... number of decimals" Name="LREALtoStr"/>
	FUNCTION GLOBAL LREALtoStr
		VAR_INPUT
			dst 	: ^CHAR;			//! <Variable Comment="pointer to destination array" Name="LREALtoStr.dst"/>
			value 	: LREAL;			//! <Variable Comment="value to be converted" Name="LREALtoStr.value"/>
			decimals 	: UDINT;			//! <Variable Comment="number of decimals" Name="LREALtoStr.decimals"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: ^CHAR;			//! <Variable Comment="pointer to destiantion array" Name="LREALtoStr.retcode"/>
		END_VAR;
				//! <Function Comment="function will return a time value representing the time in seconds since January 1, 1970" Name="UnixTimeStampGet"/>
	FUNCTION GLOBAL UnixTimeStampGet
		VAR_OUTPUT
			retcode 	: UDINT;			//! <Variable Comment="unixtimestamp" Name="UnixTimeStampGet.retcode"/>
		END_VAR;
				//! <Function Comment="create date and time from given unittimestamp&#13;&#10;&lt;-- pdate .... pointer to structure where date will be stored&#13;&#10;&lt;-- ptime ... pointer to structure where time will be stored&#13;&#10;--&gt; uxtime ... given unixtimestamp" Name="UnixTimeStampConvert"/>
	FUNCTION GLOBAL UnixTimeStampConvert
		VAR_INPUT
			pdate 	: ^SYSDATE;			//! <Variable Comment="pointer to struct SYSDATE where date will be stored" Name="UnixTimeStampConvert.pdate"/>
			ptime 	: ^SYSTIME;			//! <Variable Comment="pointer to struct SYSTIME where time will be stored" Name="UnixTimeStampConvert.ptime"/>
			uxtime 	: UDINT;			//! <Variable Comment="given unixtimestamp" Name="UnixTimeStampConvert.uxtime"/>
		END_VAR;
				//! <Function Comment="create date and time from given unittimestamp&#13;&#10;&lt;-- pdate .... pointer to u32 where date will be stored (2#YYYYYYYYYYYYYYYY MMMMDDDDDDDDXXXX)&#13;&#10;&lt;-- ptime ... pointer to u32 where time will be stored (2#HHHHHHHHMMMMMMMM SSSSSSSSXXXXXXXX)&#13;&#10;--&gt; uxtime ... given unixtimestamp" Name="UnixTimeStampConvertU32"/>
	FUNCTION GLOBAL UnixTimeStampConvertU32
		VAR_INPUT
			date32 	: ^UDINT;			//! <Variable Comment="pointer to u32 value where date will be stored&#13;&#10;format: 2#YYYYYYYYYYYYYYYY MMMMDDDDDDDDXXXX&#13;&#10;Y .... year&#13;&#10;M .... month&#13;&#10;D .... day&#13;&#10;X .... day of week (0..sunday, 1..monday...)" Name="UnixTimeStampConvertU32.date32"/>
			time32 	: ^UDINT;			//! <Variable Comment="pointer to u32 value where time will be stored&#13;&#10;format: 2#HHHHHHHHMMMMMMMM SSSSSSSSXXXXXXXX&#13;&#10;H .... hour&#13;&#10;M .... minute&#13;&#10;S .... second&#13;&#10;X .... 0 (unused)" Name="UnixTimeStampConvertU32.time32"/>
			uxtime 	: UDINT;			//! <Variable Comment="given unixtimestamp" Name="UnixTimeStampConvertU32.uxtime"/>
		END_VAR;
				//! <Function Comment="function will return unixtimestamp from given date and time&#13;&#10;--&gt; pdate ... given date&#13;&#10;--&gt; ptime ... given time&#13;&#10;&lt;-- unixtimestamp" Name="UnixTimeStampReconvert"/>
	FUNCTION GLOBAL UnixTimeStampReconvert
		VAR_INPUT
			pdate 	: ^SYSDATE;			//! <Variable Comment="pointer to given date" Name="UnixTimeStampReconvert.pdate"/>
			ptime 	: ^SYSTIME;			//! <Variable Comment="pointer to given time" Name="UnixTimeStampReconvert.ptime"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: UDINT;			//! <Variable Comment="unixtimestamp" Name="UnixTimeStampReconvert.retcode"/>
		END_VAR;
				//! <Function Comment="function will return unixtimestamp from given date and time in 32bit format&#13;&#10;--&gt; pdate ... given date u32 (2#YYYYYYYYYYYYYYYY MMMMDDDDDDDDXXXX)&#13;&#10;--&gt; ptime ... given time u32 (2#HHHHHHHHMMMMMMMM SSSSSSSSXXXXXXXX)&#13;&#10;&lt;-- unixtimestamp" Name="UnixTimeStampReconvertU32"/>
	FUNCTION GLOBAL UnixTimeStampReconvertU32
		VAR_INPUT
			date32 	: UDINT;			//! <Variable Comment="u32 value representing date. &#13;&#10;format: 2#YYYYYYYYYYYYYYYY MMMMDDDDDDDDXXXX&#13;&#10;Y .... year&#13;&#10;M .... month&#13;&#10;D .... day&#13;&#10;X .... unused" Name="UnixTimeStampReconvertU32.date32"/>
			time32 	: UDINT;			//! <Variable Comment="u32 value representing time.&#13;&#10;format: 2#HHHHHHHHMMMMMMMM SSSSSSSSXXXXXXXX&#13;&#10;H .... hour&#13;&#10;M .... minute&#13;&#10;S .... second&#13;&#10;X .... 0 (unused)" Name="UnixTimeStampReconvertU32.time32"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: UDINT;			//! <Variable Comment="unixtimestamp" Name="UnixTimeStampReconvertU32.retcode"/>
		END_VAR;
				//! <Function Comment="create semaphor" Name="MutexCreate"/>
	FUNCTION GLOBAL MutexCreate
		VAR_INPUT
			mutexname 	: ^CHAR;			//! <Variable Comment="identifier of mutex al ascii-0-string" Name="MutexCreate.mutexname"/>
		END_VAR
		VAR_OUTPUT
			retcode 	: UDINT;			//! <Variable Comment="mutexhandle. on error 0 will be returned" Name="MutexCreate.retcode"/>
		END_VAR;
				//! <Function Comment="destroy semaphor" Name="MutexDestroy"/>
	FUNCTION GLOBAL MutexDestroy
		VAR_INPUT
			mutexhdl 	: UDINT;			//! <Variable Comment="mutexhandle" Name="MutexDestroy.mutexhdl"/>
		END_VAR;
				//! <Function Comment="method is used to start critical section" Name="MutexSectionStart"/>
	FUNCTION GLOBAL MutexSectionStart
		VAR_INPUT
			mutexhdl 	: UDINT;			//! <Variable Comment="mutexhandle" Name="MutexSectionStart.mutexhdl"/>
		END_VAR;
				//! <Function Comment="method is used to stop critical section" Name="MutexSectionStop"/>
	FUNCTION GLOBAL MutexSectionStop
		VAR_INPUT
			mutexhdl 	: UDINT;			//! <Variable Comment="mutexhandle" Name="MutexSectionStop.mutexhdl"/>
		END_VAR;
				//! <Function Comment="convert ascii-0-string into uni-0-string.&#13;&#10;function will return parameter &apos;dst0&apos;" Name="ToStr16"/>
	FUNCTION GLOBAL ToStr16
		VAR_INPUT
			dst0 	: ^UINT;
			src0 	: ^CHAR;
		END_VAR
		VAR_OUTPUT
			retcode 	: ^UINT;
		END_VAR;
				//! <Function Comment="convert uni-0-string into ascii-0-string. each character &gt;255 will be converted to [SPACE]. &#13;&#10;function will return parameter &apos;dst0&apos;" Name="ToStr08"/>
	FUNCTION GLOBAL ToStr08
		VAR_INPUT
			dst0 	: ^CHAR;
			src0 	: ^UINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: ^CHAR;
		END_VAR;
				//! <Function Comment="get number of characters in uni-0-string." Name="StrLen16"/>
	FUNCTION GLOBAL StrLen16
		VAR_INPUT
			str0 	: ^UINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: UDINT;
		END_VAR;
				//! <Function Comment="copy uni-0-string to destination. &#13;&#10;function will return parameter &apos;dst0&apos;" Name="StrCpy16"/>
	FUNCTION GLOBAL StrCpy16
		VAR_INPUT
			dst0 	: ^UINT;
			src0 	: ^UINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: ^UINT;
		END_VAR;
				//! <Function Comment="compare uni-0-strings. &#13;&#10;function will return 0 when content of strings are equal, otherwiese &lt;&gt; 0" Name="StrCmp16"/>
	FUNCTION GLOBAL StrCmp16
		VAR_INPUT
			src1 	: ^UINT;
			src2 	: ^UINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: DINT;
		END_VAR;
				//! <Function Comment="add &apos;ps2&apos; at the end of &apos;ps1&apos;. &#13;&#10;function will return parameter &apos;src1&apos;" Name="StrCat16"/>
	FUNCTION GLOBAL StrCat16
		VAR_INPUT
			ps1 	: ^UINT;
			ps2 	: ^UINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: ^UINT;
		END_VAR;
				//! <Function Comment="seek address of given character &apos;chr&apos; in uni-0-string. &#13;&#10;function will return valid pointer or NIL " Name="StrChr16"/>
	FUNCTION GLOBAL StrChr16
		VAR_INPUT
			ps1 	: ^UINT;
			chr 	: UDINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: ^UINT;
		END_VAR;
				//! <Function Comment="convert all characters to uppercase in given uni-0-string. &#13;&#10;function will return parameter &apos;src&apos;." Name="StrUpr16"/>
	FUNCTION GLOBAL StrUpr16
		VAR_INPUT
			src 	: ^UINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: ^UINT;
		END_VAR;
				//! <Function Comment="convert all characters to lowercase in given uni-0-string. &#13;&#10;function will return parameter &apos;src&apos;." Name="StrLwr16"/>
	FUNCTION GLOBAL StrLwr16
		VAR_INPUT
			src 	: ^UINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: ^UINT;
		END_VAR;
				//! <Function Comment="seek address of uni-0-string &apos;lookfor&apos; in uni-0-string &apos;searchee&apos;. &#13;&#10;function will return valid pointer or NULL if &apos;lookfor&apos; is not found in &apos;searchee&apos;." Name="StrStr16"/>
	FUNCTION GLOBAL StrStr16
		VAR_INPUT
			searchee 	: ^UINT;
			lookfor 	: ^UINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: ^UINT;
		END_VAR;
				//! <Function Comment="convert unicode-0-string to utf8-0-string. &#13;&#10;function will return number of characters in destination." Name="Str16ToUtf8"/>
	FUNCTION GLOBAL Str16ToUtf8
		VAR_INPUT
			dst 	: ^void;
			src 	: ^void;
		END_VAR
		VAR_OUTPUT
			retcode 	: UDINT;
		END_VAR;
				//! <Function Comment="convert utf8-0-string to unicode-0-string. &#13;&#10;function will return number of characters in destination" Name="Utf8ToStr16"/>
	FUNCTION GLOBAL Utf8ToStr16
		VAR_INPUT
			dst 	: ^void;
			src 	: ^void;
		END_VAR
		VAR_OUTPUT
			retcode 	: UDINT;
		END_VAR;
				//! <Function Comment="Copies the first &apos;count&apos; characters of &apos;src0&apos; to &apos;dst0&apos;. If the end of &apos;src0&apos; string (which is signaled by a 0-character) is found before &apos;count&apos; characters have been copied, destination is padded with zeros until a total of &apos;count&apos; characters have been written to it.&#13;&#10;Note: No 0-character is implicitly appended at the end of &apos;dst0&apos; if &apos;src0&apos; is longer than &apos;count&apos;. Thus, in this case, destination shall not be considered a 0 terminated string (reading it as such would overflow).&#13;&#10;" Name="StrNCpy16"/>
	FUNCTION GLOBAL StrNCpy16
		VAR_INPUT
			dst0 	: ^UINT;
			src0 	: ^UINT;
			count 	: UDINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: ^UINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB SigCLib::@CT_
0$UINT,
2#0100000000001000$UINT, //TY_SIGCLIB
0$UINT, 23$UINT, (SIZEOF(::SigCLib))$UINT, 
1$UINT, 0$UINT, 0$UINT, 
TO_UDINT(77440046), "SigCLib", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::SigCLib.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
//Clients:
END_FUNCTION


#define USER_CNT_SigCLib 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_SigCLib] OF ^Void;
	END_STRUCT;
END_TYPE



//{{LSL_IMPLEMENTATION
//{{LSL_ENCRYPTION 16#800
C86C71B7F342212FF2412A957A14F9954E25C58D950C21AAC1E6D9525398E493BEB663EEFA36E2D303F67579F7FF6C33FA9BB2290471863C461C143E1884600446ED4206C6CEB1E6A9892BD5E26521FEFEAEABE2F06C24F758A1119A1BB5F2927B97D769
C69F3C5038357ADE8FD191F575811FB39C5E8A381CAC1F0F00E8954C7363091263C10DC41458A2D14CBD8220B526CE1608AAC86E5C69647A1C63AD0B5C5CB1B5CE7B83FD170BDF5D66186EEE348C7C78D3DE42FF6289FA9AD1F1806F6F8993441FD38C3C
821C6E47438799233E95678F689993F4D1E25A172E7BE3B293CDA3DEBC333EB422CBEF9AB20C35BD83B57747534FABCCDB274C42AF84C60F9F60CB80354E65AE8E151ED1105B67820198AC53D2E6AE1A6C0A6E06D5C6B91FCE3F1CB8C9C8BF81327D1FD2
408A7F3CAC0D93026D0DD4422A8BA13066BE1CFCD75EFE9FD40FAF1E73F0EB7A5DF9666A13FB4CC850A714EEE3251F49A6DA5B110ABB0E3AEC78BDA3709097ED16CE98AE0E700C6798CB672DF11603DDEC76BA519D777FFEC4EC3F078A2797B02D16D4E2
53B3F9837BFC73EFE60E38FDA89800E3878338A65F23236DE9275083F38DDF235D9390E3886882D894F464A59C2D7D3EB2B22D48443B1AD950BB4F30C63365917307385107731B043337F5BA9B22317E745E3A1A2AFF52D8F1144401EAB9E73024F1F400
BC0AB2A11D0CAA00617D35CBBCC5C5F7DB438D97F9E4D6B7253238C4C261F466B83B2041132E5FF610C5880C9B6C938EBE859774F549BBB57D3B2152602E27E0225431E6B45F0F292EF2F5C62D54397851F2C63AEB1D8BCCDD560224E97E0BD3E5914F0C
051DD9A9AEA101C5D7CDA6CC861EEED2969BB620CD13B2BC96F7E9A6E270118735D60EDF65DCB9634AA8D849DBACCB1EDACD05A3CDB207161B82D8B44DF389D4D1779408C1AE929DE3BBC6473B38F7AF31B82859239BC63849E573DD4AF2CC3897BF021C
6FEB8E4710A594F335A190856B06308257F63DC66494EE189269DF4D93A07CC735862FE31C3E6C89D551751878316E471E6EB251EDF56F445033845EC300B253FE1F7E2DC0DA14AF63B549C1ED8BA85554078174C602C0301EBB1D2205CA60733838206B
5F6B83B3076AB174BD976575A280C55043E9EAD05F7B5B6A009D8B5402B6E439DFF2B147D1A8775A83CE8F9B9F033A6F4CFFB0C7DD461648D3A4F8F49B5DFC961F594A060F6419F300538BC3AB83326A6F5F70FCDFFB9C3538BDCCD7955B5A99AC79B4D1
D8546E1F96FD1E870AD03B138CF51F899E723C53AFEA400FFB733FFEB86806BBE338D5797FD95A467C39591EDE1EEB23FB774BBD10D95B89CAFFB609DB3287A28DBA04C4A7C4299FDF1FC6E532F95DAFCA791F59AF9112AE1917B23E3AF76E679FEDFEF5
5DDB86BADC3BFE8B4B19A5739E13250427E1C624A76A29D53D125BD2A506A105C252F7EF632132046E5FEF420BCB8039D0D7685BE2BEF78F0316153B7FD3A255B3D51331811A968A52455DFCF28C48A7B49116F76CB523B466D637606B47C21BD51659E6
26745FED21B610AEBABF6D9E104B562E6C41E4F8F10F6AA35968155E898DCA2EF715C2273BEBD6FE405A211150E380C44264BDA8450BDF6E3FA643ED16BA1708BEBF3474259066B8022BECF232345131A5D6146209B05C8D1D3B5D319C2A310DDB045319
DA5B2840D58E08D99758FC32EAFB78074762CCE0FB000521C6162FD8F07EC61E3AA257D56BBCBD8F8927A2D2562372B3CE220D697F6A49837B49777F758A14B4262E710B7C23C1471AF67F03890558C45E9C45CA3E3B4E6B7968BE01B078489C4BCADD8A
A031D9566D266DF477051D1C88E8C21ADCAC391362E80B429BFD712263E54AEAE601C59B246E34E7EF493702B6AFC4F7B45A19B1703CD0D29E332FB802ED39BEA77155A3EFDA65F5F1E34C2E7618C7CC187010F809935A7145249E31448EA0AF21C1C2BF
3B1BC2ABB7965AAAF6D20243D6B7975E7392CB58AC660AE10D984AD8BF70C2C8F0B6C442C3BC8FFC076505D50A4FD65CBD24B2C866EE6C59564949DA1A489F3DFBED67DF65B4972D37034019C0FA339998EFEE4785AE7FD2C405BF7A42229E7247592966
3E20D1A9F906C8648C43692B476FCE6FD73257B561C1C5C724DFDB786E3F9842A95879A3137D4BF8426BC1CCCB9435B5A7632279E62321EC4B87453789E4212D609B20F8B4BF0608D34B9E5E0CDE3CB35DFF7A68618576BFD1A4679180D80BDE1590B249
9FECE8F0F33913EEB2F075E17F76585186C136FF520142C35E0F61883883A97CB170C6FF1337B0588E41DA243F9986D351F7A5025F0385AC848DB0EB30109F8A2FE701DBEFDA076F1EDAA9D1C453D85622AA92FAE2CE20A49E745C581E12CB3971F753E0
A7063EB84728B2FBC813065B8890EA324C43A0F511D499DC87C60B0FA8B448327E8CE6681A4001077387745D1DED1613E70CE9FAE54ACBC4B02274C46216417DA8D34ADD4A79506C52C5745D277BC49E0EE57DBF6984C5E4053EF48F6192C2181B52CFCB
22DE266DC47670D9199F5F8AB477FE6EE254E83CF6248F438EB8580DB1BC2E9C2C89B485DAEB6470FEC45D0DE4048ECDB5BF70FFFC6BA15DAF841FB9F1E11290BA1F5D0B3A24D3FA50983DED0CFCE1714707E48C21B15C1405950DFF9E59CF5F1C959B6F
E5352138628C90AAE745F685D6CD844B7C41BD766AE5437BA857DF3F80DD1BC56B2DDB30A3EAE4F5B06B3FBFC15301626F8A9C3B45807172BE9ECC8922F55FE0A220B9303D1D4AAF392321541335C083ED3C68D42B611A1F8F8E9326C6B8BCF59F7F43FB
44A3AFCF930B5ADADE6E62AD694F826FBF326C57F6C2040FA5FD3F72DBE9E2B0098761532C94EDB1220656C28982DB5BF57FFBC420016475BC5785EE646DA15430502E41AF5E6DFE6002B2092CED90476CA3E4464A30D4EA6E1C03309CED8AB9EDD73079
8CDF3C477A6DB7CA33ABF31BBA3CBB3CDE307F555D12BBF90CD7CAFA6CCA2C836E04C447B9CECFB61E311972096E0A0B4C67A480891774908B823DE82F8AE570781091302B625EAD36511987A13BCC686BE33AE69D80A914009ABED7BC9F3F6D1277B0B2
26C277F401A2CF9F2CB3EAC6529898BFE1A8122A33833DC5CAADF155241D23ACCBEA229F94A3AA7019A222C794EFACEABB9535134800A74A9FF0BF0221EA388A39E425F3A35B66EADC27DE58AB20A7DA050A63CD8E6D60C9A45FA1B0D23E1C135F8EAA52
225015AC0BED05889426DAE437F4DE881F6F7960AD2B1311C1AE40E2756259BE69FBB4AA04544E04505593BE912B9786426D41BBCDA28EBE6F3467AD5471639A2DB3558523D28D579694E08DAAC5047EE4AA6178384D1A75554EDDC1BE1846B1ADB81F43
915EB11464FCD47DE08251CD6F16F4421314D474DAA8C6D697719D21DCAFF3B6553C0D75D4E16B2A921C9D22E1B145CD846877108DB2FBD92DC5D4CCF560B6005500F4A1F106B596AA5C64C2E8C5F481442B9C52AE02979DA7DF512D87BF7F76AB151261
5C074F9018320B30495D46F74B76C83D8D9E9DAF1E5DF4C0950DCF2683B7A608A0B5AFB7726882D321E141AD73BBA706A8228CD25D843826C8F878E77CBC7B3A50F57C074FF0A8B710E098DD3A3D8503DFEB09D6E6A3C908755E2FEE1F4A6C34A44AD488
78196987BF02FE2E7F15AEF3C4B1A4E739C6F864B9D3883E2FAF1A1980A195F8ACB8C7BE7F14FB897B0842FCB6760E2D6F5AADE865CAF25A2655A96E416D918664A8AD56B228869B69C7E9F269BDA0CD76946C02819DF8E1680B90AFDBCB0F6A50B9A9F2
202958C18F6B14195970FF57DB1B73517FD3266B2DFC620C85CD4BEBB2644646CDFB404CAFBEC70109FA6FCAD6E8B0BF82762426A18D62CEFB02CD7EF6E1808C149D91997C733F60C5D5CF49846B571C67C8DE7326B648E2FA5E691D03698D98281B8B96
EDA7EA5A60E403174C018A243CEF907DBEE30F2EA945821A8EF74F2C0146F933655B98010D22277DDD337FB1A8441055BA4D353C2D8E3E1B80CD4509A20E864ED80C7D53B70D8006B32D7A87CE520CF69F25B8DA4BAF6492BC0E4CCC997FC177AC94735B
2219347023A4AB932478ACDF0A603B7025EF8D30287E5D00BCC5168920CF536678DA6A23DB5402C4CCA38EF4E2E097AE3F6118E2033D1948CF0DCAA3FA9DFDF1BEE1A850BCAA3C82B4F4968BD99016624F2D106F9ECE4D08E9760726EB21175BD11CBE80
EB58D0B70FDE5A4D9E02F0AA127CE9198E353E80D06FA5C64C79FF2FBB750EDADBB7397828567D68165718D54A68FF3584954018158C00B4539073C389E4D6415CEA4C6573565DF6896D100C5E233BD11E879A031D01EA190F5CBB63447281B16743FA3F
5514E77B07C82E78196C1F601F405FC2DF9E6DF1E3BE3A7EB7245B37C124044243EADF9C8B1B0BFF184D14B024C58AB4C48C966B5B115AE24D685E2ED8FF9936C759D82357285EE753B6F4DE824D61707A09FF66C3C88657169337B734583935A1E0E480
FEB3BF43C8F2230293C62508FD4FBA8C305692B98137987DB4D9AAD12987AB8A63D46FCB118D666CDC7E018C1A982F50EB32D0A5C8BC229ED1CFDBBFEFDC6999339103EFB90189938C5F043FEE3BBAB0B8D2CF904264621DDD2AD2E42E8E690DDBA49581
62BC16FC608DD0B634DCDE2D94D635F41D2A469508987DD4A0C81ACD9837B64925352A55A277AB8BF08DEC7F82AB6358E943EEA5201C38C71A69842554A2EB0D706A5B2DE531630F6A20A5C0251F31483D9ACED7304C6C659608E460300D7ADF1DF564CB
DCDF9FEE7FC5CB4A71EED0BC372EEF08484821B6185C8D815F1E553F4098F7DBD28CEFB908ACC620A807414C9276ECFF07A1BDD87BD49F620DF30F45F1C31C045CEB9F58800E5E78ECA27E9F2AD9EF3B5491AA253DA3D3C39FF6BB20DA5C77FA3ACD6B55
829A5D22FEACB98C4FEC35BFDB163B504DDCF827EDA7F9248D11F5C6FF021F582BE3373147A4E8B012F27CB9C2829611AB85613706D2A5F0FDC3AF98FBF7934A31CC28A5B3C5E8BC69CBD75958480FB075AB6B246C2F97AA7CC72BD10AA7ECBAFF9B94B8
2690B0257186F0A995CC4CD185278C18E7E2049BDFD9FDA09D1A680F48D3A4C24BA4F3523B9A08FB7BD5154209D75B3951AECBA5BE3B380875D1201F91076CF6CFBDB2AE97BA6934979B5F29E355E94600FE37038B1B37DF64159F8FEA96639FD13910E5
905AA898D46759A83BB13B71CA40AE4FE92EC532200F4D379F7C1AC0F2FE67CD564D2CE11A2BB647EB7BE7C62154F65237461CACBF43652B989A3C98B402458B2BED133B2A43DE9A4D38ECC21F128CFD5F6AD3250AE02EFC7578F0850B19B01E18A91377
1CAD38F1831348A75A953C32966FD04FAFBFC62C8B7511DB0D3E6D6A34DDDB98F1F7D60F06CC56A05FA4105E9B26413DBF19E5D90D6AA13AA14A501FBBE8B3A21AF40E36F61C38FE38175A6ADEDD77A3D0D75864F2FDC78BC520F8B149D7DE2CECC7756A
79F76409006AD1FC7217F5EF78564C0F7F3F2E017A93E9C48AB42F58CF11163D58E604496ED33AD409E1FB09376B92853F385993389AB65D99544986F6B4D9FC0DBDB9686459A07217B7EBE1A4C9A01CB9C1CE2EE2355B283269B9B24533007D047F31E2
DD3FA209F181993EEF325E21F634F36240EBF4A7B651FD11DD2C98611616CD441FE8D29C41FA63B5716BAE1FDE905FF3B78064F4E78490C6954BB29933F18947B84DEB13B5DB0308E739DDA71C8646B6662514F3836B08EF8FC59A68247FAF4AD7ED01B5
8C5199A9DE67B0C9978D283F1579F193B9D52F8976716D0C138B9284F70CE516C823B5ACB5E94889CD212C49E75A4AE6FC7955EF0E848E581A604750B99817E582A9B2704C0AC89227C2A90016C1A054729D14CC6CB9BA7F2F42C9EFBF3A5D7E82408A97
3ABFC938DD4390CAA7E4991A1EC9D8177EB2EF3D95845A6E3ED7D4895B7613843CE4DCF9A2ED733066676C3553FC0E2AC8BEF53C99D150CA36B580587EE9818FDA9DE5D6934779A37518AA0D174EC9B05EEF4C694AD95B7C9D884A194DA80DB4CD71CF8E
B11DC9ED173320078E0D87A2971E0A32FF6FB97C07B9CE33E060C558F3CEA4E859BBEB77107CC4C95B82EF3B6C118ECE49BCBF13669C6370AAE52ADD0937F288F213FA271F65A51FF5003E74BEE7A424A6FEA99DA5E8169C89F94A99D8A6CF994F51DDB6
60DB01B5DDC347C59308B4E14737D365C28D784E14BB35D3D8807225CC3A0907C60AA32E7BB435812546B79258BFB4F3423E6D287379F82D3E394BDBE457964FAA2BD846D6C811AB71E142300A743F2EA75825F0CEA2000C068359B4F50C24F42D1CE518
F78C6166A8CF22E59CAE35172C6C6C76EF497380C6653826FEF09BF441672A547EC1D0BF42F3995E862AEDF2B93072A0956A4942804CEF0F6B41EB31543D427B06E23DAEF76662F369D22C2A222BB38A85E1236CDD1F9F9B827402DE92D954B1F8DE051B
C051B263DEE72AE27DCBBABAE31B0399B25935510666F721DC8E5BE4F7410535F50A5521EE58AE777310B624EC2BB978A2B0BD1F34EAA47A2F2716A3EBFAF8190A1375A599BD0E2CB4ADD755DEF49D1DD166659FF753F5E36FAD61DD9A1C5CD3AE607556
10877EF5B23515F06B63832A5CECB442F441D0B5410D016AB8130779C95908A65E5D4286E32510BCE68491EA607A0944A1E69F9EE5C6D16D8B45B29CBB8BC1B29CC4A380A3D137AEB6E765745CF7F32D9BFD290595E2B784EEF3ED86CE348DB4DDE3CC90
93385D62FB64727B897295AC8534111B10D1CA92D6FA7DCE8393A3E1ABAE057071D4B9C9952A52BE70B914D0F904EB5F25F89D37BE62E3204F0160C0F23C47AF074C290D943E4F8B6310364ED1344F910CD2FF35C0F1AF0D0BEF7B0E00E16595313886B4
1D2E97DC557F70C0969ED70D67BD0FD6CB40DBE3236B3A000BCA246F53977306C642FE98B0D76DEA725A84B06B1B4F15F4EA6B3BACD19A6BD8286592FFBDD78E2BD6E98E6BDD8E4C2314FB1CCE723FCA1685D4A147E4A347197B3C715F4DB02A00D99A7E
0031D7208E2254B3853434ED2AD2DE633BEB05F3731356CE4105D0DF6C9E400474C1D5FF0532AF98E2454196FDE648024ECD7AEA5EF45BD53F064079B9FE0533DFD71305D9827AFEC6D4BC3A1F8B83944AE6BC249F1AC4AA91C2E2141098AA0F434837A2
FD8C05422463F59DEEB310BE8E7561F0AF3A763402F3F30B6B731740875670548B8276491FFA1961CFF7B059DDE175877E61154A25A779098671C6FA8D15A4F5844CFFFFE950A2335B38E2219F7A260F93A14C4EE4512CD0F130F1E8E492DA7E92F1A5B5
916EFA7D5D7A6C2FE11EE8C86B6CFC385492E9CDABE5C7F5E6E249B4266916E077E99F409A37D84D1668CE28008BA411DB1D65D19AC3334489BA0E69BB81B23983820325A5F7CC0963BA4AF3FBCFF05484C6354C36E0B1644B85E40A25CC0B73DE6FC54C
8757A8D5A9ADAF194681A6901D1379C9DB001CB2EAD09D88DBD7F11D47526CF23134C373224A1BD6040CA1E7F0BF7E5DAC54AADAD1DD87E50336316BA2B0CD11440AC2F890CAF4A3EDFC54FCEC3429E269635A3D9F9E14F09BE87BBDC47A2C0DAB286B2C
A299392FCA71092F41258B560F1B40504B8A8409977AD6952089FB97BEFCCF19C5200F80BC409C477242E473A1F97D13230D7E02216947408AC02C87C18035A24D629CDEFA5D430247D270121B7ECD46B1760352A595292844496087152834BFF9C5D1F0
30664B4849E5EFBE13B001C5B5A3800C4FFEAD3587EC8AE7EE5E6C0B024160D094A9AA985DD590E9238B87C724A5BB06D879D2606699702DCAB7508FC857C6D166768E89C52BAAD25669632F8B115B09F2FE89F934794F0CA6DC79B03231F123B9E47B86
5EBAF8A5971539989894F11342A2DF638F9D649CDCEEA7054D406B2748A1460BC964BBEEA778D17D0A9A72BAE6071E44CBE00FC232FCFFA94D81680A886C6DAD0575F63DCBC664581226DE0880BF16A8E8FECAB27B6D44CFA1ADA1E5478B50B03A71E1B0
78BE9F97EB08B60F266FA100F81A95335D49A555E57DE5EA65ED38F390D0E734C8F64DA42B55FD563B3FA63F44FC899FB812694ACD830B1C84BB196DC5B1C6BCD66AD2ACC7832944698E710DC61983893F7AA6425D0EB172856938D03A58ACD8564EA6E2
63E986BB2BC2391B2A40160A0DE911B786897D3DA367724A267AC5926AD42B18AB806C44D9F8D563E52A2123A84D07876269A169C074CADA1953BFA70CA83D1B566E94089CBA07D10E0045F8889BD260AC87021D31C13DA55483F5947D1F9284F8602159
8436394B82708FB3EE535D40C3831634A21127783541451FB565A21887DF54AD72435D8DAC9850CB2804B9D3533BCE3C836B3234F887226D71FC029E292677714910D810AD39E111446A8495907247E535ACAA44A972D53B2181DBADAC68EADA6591710D
EA77E9807400E13B2796E4A570C3E70AC5214C8E3AC65D8ACE6509C0895149A38E0CC4440DD4C1EB1473C1B244883AEF10C7480A0B7FEACA357C2BB4190BCF87B406F9809649C884DEA67EE62D88BF10987775AB73FC99E1691C701DADED142F6668F6A4
3754ED4B2C76CD4E6BB9715B7C1DF42A4EC234EC339FE869C70E2211875B48BEEA0776D32504CAD80D056054DA3741A0411A295330D4C5F1E2E318DEC8CB21D600513FD9FD2224026AF8F7C6C419508F3BD44C509EA634A1777B82A66318105CA871D69C
85F82D5C02CD3B33ABD97A82A74CC0FDD8BE9F326EC72D70EA828592A3AC47B64281673416446943E8BB5E45F1D161B20392DC47256363A96D90752A926F8DB2C565A9D45587F62E4CE40644986B63BA482B51FF6EFA4C52F49CA81BDD07E30C5C6E6129
E1B0492FDC2030C5780C719D255E904C8C3FD174E242614C8A5CB1296A1A4B36225025EC5ECE0F679CFCA7B38B5DD0F5CACD2F1EE5818F68045CD8ED84EB2CE98328D4F454563F66C38D49492BA5A64D7A47F87FCFEADF5C54E9EB411152E4D93E4A63B3
FD0781EC8D7FDBA4EC236402998CC8BD479D65C11E30CD81F2FEE4F78B87403A5D9848C97DE7EF4315C165A9F3074D1AC00A59F80D3ADC67A5B03CA2C1ABA8CADC8CEC4D2FD8B26ADFB05D61404F437C3880263C5E8B9C19BBC99F163A9D614D0B80467F
810C957A8797DEC5149871FE973D64C68DDAD428BD96A22A45CD7A6149446B55BAC7AB720FB473D08C00D841F7CC265AEB14B36A94CE9275C50869A68C0267BC6E74F1B29A6EFFAFB3C5F0F0EAF1A9543C327A062D854EAEEF48CDF1E3675504ACB761E2
8F430218B42082C0FF3C373A2D9B8D2D989D14CDFA3B4825E164B8C8D46294F51C2F27B9BC7A34B5BD5D64D69A54D2B27F45C5C94B385A893B8F6068DA31C13AE9EF8E5ED44EB1BC417BCDCA08DD7E805CE51E03C37CD3DE60D7CCC89640A86361347DCD
C25434D365924C56559DA97B90D369816BD4864119BECCAB55C601841392E6005C10E99ECC782C185F69D9AD1351164D4A3D42EBA15254C5B8E9BC0E4E041BB721FA7598D929C879AC3F0D9DAAFBEE257794A599453FAAC9B3A91ADC6C7F042D4831E744
A52E6D4E83B709DFBE7357CC8ABE8A223B026E4C48B0682E8BED851E48048EBAF533ADA6EDED57DDAF2F5CBDD9B85E4D84121ADACA43D0EEFDC0125E2BF1FE3CB4FCF8EDECE51F11E7EAC9E13BFE1CB294E57CE1719D4D83EB6D7800C18FC7FF52F63660
9CEFBCAF211B8721C8139FDD2DC9AE94EB0ED071BCCACE4840522BD7208D9F2A9FB259EE1D9AEF92839E56553215E79A596F39451532659CA70F2896B90C9D58771F227ADCB62E188FDE81B8C1138C330288EF667DED9F9DAC1BEB487287CDDD26E74FB2
3958DA153117D02A097C796C9541F680C2E9882C082BB8184FA1A934C95BC66F9DED7A036DE2BA4023458011FE3BD68771384797E806939BE2C76399A8E4BB9AB90F78C10E9C74687818FAD7798FB02C95BD6DD6A3468C50F0B072E364A5CB70B2A88F1D
32E77B98AD03E89B06ACB6BC4DB9B18F8D546E7210340A824946FC4A9F4FD634564BCD750B73DA03E7A1B9672DCA5B654767EB60732C21FFA8DA5FEA78F5AC86B68BF3B0CEF4F052C3DBD6F61081825105379166964FC08D54E01EEC5BCCB1AFC539192B
2800514A198485CD5106BCF10E5342E3C736EE73BD5E63ADD54303DFD79EC164ADA3DE438F73200F7D11B8BFCDC3A596370A99156B49D1E9C6B9C2BA863189F394BC7213AC51C52CEC6DC147E136C46BE41A3548881923802AD2DDCFCEA2614FCD915FD0
0A27ACBE09C577135EB30842A0E7DCC3A91576179AEADDCAA99604B9EE46A75B1653114C9E949AC45FD423A55531B955DADE631EB83F38951B8FB344BC841E49421488224387C6C4D5F4827BC3D4C1E4F93CAE1B8A1ADBC9990563BEDB9DC25619543846
7BC38FCA3B21AC3572F41E53E7B36D6107AB8F2A177DE2BC8A5AEC4C20DAA440346316AAEAFCB2833BFE2B2C07350153A58C4CC27CBD79CB804376D456BF371B2AC0D4D89AAA5EA11DD95CFCCE7EAFC8A4DE9369B3FEC568EF887FFCF4545219AEF7E885
B411032C2C254ED79A0376E1A9EA5304BC15DF229C46CE30F9D67C9C8126DB82CDA5719A4955A50B7C1CE69E82D6BE693DE4D91FD0A0ADED515DDD866A046BA94959A4695D123103B1851BE1C388392A467B6D5CA3C81896AC340F2FA6D027E0637E5DF1
260278041548F6145F84907FEDD8D6476DBEF5070BDA1F37CB27E27FC9EC66E81BD25E0E3B3B77931277CDD3C42096B1770BF80F84C1C699F2E69BA8B55F18516FAB9DFCDD329ED93BC122D28909CFA81E863FBE07974C1C0F3B3E0D61446E3339096C9B
2858C8F76AA0485334820CD9113070CE1F9DC819F05AF3E48C0CB0761359EC504474AB4915539F1F116EDC2424B18A31754B80BEA57BB523B32BF5C3BC3E529DEC49A14915CA05EF14374E479B624644D4EFF460A453FDF802C06D073A0504BEDFC60CD1
6FD70D8AD7570F912E89087860F097DBB1A04736685D8B386ED7FE37713D9A6DC284B14EEC795C266B8C8688BE09B8B550FA19145A44A00887AFB7B550F5522543984921ADDDCA34E6440BFD42B89E41F724ED4D7714DE23C456F82E7551174593DF80C6
C160CDF1C2204F2C6BBE5D359DF61E00DFDC6E8FC0EEE7C6969842DBECBEF829C23D49E1F664B0C0119191FD2C9BBF9D42A4A21900C9527BEC7C6A784A91EE33AD47CAD41EA17CC133136C3B576D4EB26559C00E44C327C71056DC06ACF8368766C77F48
770AE75019AB513EA4772D3D0712498520DC45A96A61005EB708ED0153D8D5958C92EF4C69DE553D2B9B07787B00026DDE11C9F4D3E4C97FEF53AC6CE0E02CD67E964996639DD5E60A79EA654F20D236EB708FF6BFA8C0630BFF5AA499AAC764ABF57216
727F906A118888098EAF8D3A250CBAE9D354F2BAE6FADAED4B6EBED0DE3EF4E1F63D543FF891165DF5E366DDDA0DEA89985357CB194B8460ED08A352B6613B07A594FCEFAFB3DAD9744F8FE9929F253464E8A91B2050F8AF63F9085C29A913752FCA3467
1EADA50467842F0D0CC61E69126BBC0642B92489F82D149517B24A7F8FCA1ACB3367D45CD3F486C89591FEAA6E8465C4D592E28BE0E8D6CEDCC297712F61B2FB3302E548CFDFB48C914AD838A9589136701EC88DBDD31A9A2511FE2FB82A60D5BE5022D7
26933C84CA591213D181EC4EB5D7689832990FAFB96D12341A1F8156957456DE8C8EB0D5E38B66200BA6FB79B1C252D5BBF309A410F3F1FD8DEFFC738247C2423078488BD1FA034B8D7EE6D564970209772F7FBC563FDD58227FDC6A82D5DDAEBF144FD9
1FBD5AB2654EA89B6E1044CA0C98958A5DBE3CDB0482AE3FC4E9A5223CEE618D9B9F81466B52A45CEFCC0E400CAA830F03582A677218B98D2B02E0A3579103BBD9697C693761BEE2A3B53AA62C2CF2C7A8545578F1B1CA39E8856B82D3F46FA3F10C019C
21E4DFEFA3601CEC58760F24EC8646D4425D21FC335FF5F9B49FEFEE0BED8B31301F59514C6CF254F76EF8E41E63261F73773A4EF6B17D4E742FFB38625E5D3907A1569515A2C7ECCC4B29C4CBF3797A5A8C4705A81195237EB1772A46EC197865080615
F90FDA473D6631A715F328BC84940C6986EEEA54DFFFC8B68435344E5CB43A92CCA4CC966164B6734474AB2959F52206E982143769715512D17CA5C4718056B96B8D460956B40B890B8A4B343899C39B011B020703EC974E2DC4D87C0078C390BDA342EF
061C3F879566C81FA58AC73A8D31E1CCF0A5C8BA29BAFCEBBC8DD1B9D88EEBACF4AAAD056BC9BC0F27329CBFD359545D0D1BDC79565B34A7D04FB2B2E6DD53F8CD913BA90D8C1AA6861BCC0B8546E481F656D64DC0A0D46F355FFF988096CE5A05E6D909
0C6C93542AA13E53325063F3FBCFC6F40BA3EF2B23F90AEAFA17272A20FE7AA56450C45AB4A750293EAD6708C76AA3ECB2CD0FAD41F09CA218DD212595359602545EFA68ECFE16F94391A054E3B7E891299DD29BD076548DC40DF688D4140CBCC911D5BC
8AE399D22CD47AD692E9233E6796D13B16B514DAE98002E4F979D40CCFA9E1B71306B306252656ABC5C19F080190623DACDE4B8C0F68E9989327B5F3BFF9416036AF7D53958C0767EAE265D690D1C0E4BD2DD1B1E0143E5FC43DBE5FEE624DCB9DE6F8D1
120DA1E219334C21E5079FB3D4A34968CBD6EC8F643A5D1F1D7C4EF051F12D85F9001C450AD6573B09BBB4FB52D58C50B40FA9D3C966E2A4625D84A93DBC23FBAA0D619765CE084DB52BE2A093C5288748C3E12DD0C1BEC2CB3A6676AAFDD82E06F2A73A
0D61CCC52D633EB3BA2E7B52DD50ACFB861B23FD6FEBD6CE7E42F8B85020EF9D9958E59F072041219988C7F630BEB896516A23C6C5E113CDF482FB9129139F15B596F49CFAFE9BA6A198A5F6ECA5B84999F0792AD28B50D4F536A28BE6005A483CA899C8
C312FA4B37A66721C782FD708BB43F7B6F76141112DB58DAF1563C3B391630B31DBE0DBDC45EE9BE449C39EF0C53C9ACEFD82A569F2F68E707205A622E9A04E5B5265EBEBC85245EB479191FB8F70A7F4CCF250EF32018092C62011798B7B61695726BF3
B05BDF8416DAE00FCE3CAA5BA6D14AA730D5F0454098A467B42F9C4236628E2E0A388618C26559FC3B7617F2EAE99E71030A0A02CDC96915618AA92C874FB1C34E29DBFD5C0F8FFC8231BB8BF83D7D48B25A21887BB2474DBD47516F62F1D436C9A45EED
4AA516742D28E41C69E2DE4B63ABC26047A6C39E2545FF6F1F12B910F0250212DF3248BF04641CCDAE8BA40F8851F3F954739A752C8D0F75110F94DCA5AF05406AFC805F59D739B93EC6A8C3079E898BA826A4C5189193E2B0F71F5E7B9BC75EC60C6763
03D6EFBD3D9A5464F0C338C63EEB288185279CEAF7B05D145F73E62AD12A5DAD93641B6ECEE816D91308C6DCF898DBA81B76FF31480B763F1A7FD82931A6D0A2B0FF65B68246CB457292DD513610EB691C007631822A2BF1649C2BBD21E9E23C01591BF5
5D3C786DD4D4887D0030EA62730C106F27353384482E40B65D83A8E1A713438D43E3531949453BFECF5F4372031509B2DBF9C9D22364E546D2609A077F9854BC09CCA98BC639FA59BA6F9E17857124B3F3F1F5E2CA4B19D87D114D6E1DDF93F99B30F6EF
D37BFC1E5B391CB14ACF7BFE19E4580E85A82AE58CA2411870DC3574F6778E58C83DC0353F3029183D714227B954E4E76E4E0EAC97D32FB51A098C6DE82B393087DCE5A7BC5F66CE29451AC8DA67847F30BE7A1BEA5B6BF49ABCA1B464A66136A65CF50C
B397B38779EF4A90E11375D95BEB6D71729BB913AD4E5BB4423EDEE9EB4035A987EBF4D34CB9F806194B36CA6A0A5E5F8CDCA1DA54CB383EF175D199E9CD2E1A880ED0E2ABCE67CECED6BE7BD7A42955EB2E95327C0FCF3E66106894AB4FF9AB935A7509
E2CFA5B1BFF7FC8D6259E97EBB5AE51026798B36F762B78FEED06B681C3544D8F0CB352838FB44F390428317CEE4FE2C0BD774CE06B86B8C7C3B95B178A96B64762E3A270BD09649B779374A7175ACEDA555D491EDFBF60934DF9EE923DDAB22D7BEF273
7CC0759ACF31D835D414C0AE915115A5BA2F5288C3A9C3FA154466F3842B69687C1E8A67E3593E4873290FB4FBD25E77871F279A470487D98D1465DFC15A51B3449C9DC6B1AB1D8FD8F5A0050E3E5F03B0890027486411E498D28C96D7CB115548957381
D16B65539295A361955362219DA0A9338911227C5066ADFE541C013A4633AFBD481C0C25E45CE2FCD70C11B5C7CC0205685AD9D418FF32641AFD2A5E59A2D07EFB50A752AA856680531CB3F1C182C41B568F3E513038721980D049AB5AB433B30796DE07
5D86F846ADB7E7A46B8C52315128586AC3B36C615BAEA97682370AB2ECCAA1FBAF8FA0714A52A8ADB3EDAA22BD504E4AC41A97092B9D1E8FEAF5CE738E9445B8033BFD959FCC8F195249C859A03185F3176BFEB209F090D9B4D05411EE80DA1EBC8D83EF
2BC8894BFDCB9DA4DB392FB13B2BC39BAB614E99715DE6C7F2C0D0F65BB62CD0D6D3F73005073CC5D21A65D48A71E57910AF06A443678446194C9C99BC9DFEF9A69AF4D73AC368E8240C35A2D5A03204AF63B95615BCD8DEFE4B58AB38AFDC2F42860710
455F6516925DE4380A6AC29EEC4EA84DFECB71424D87904CAE7BDBF12D034A30F48AC9452E84ABBA5052B1B8D07E7E93E0C27936A954BBBC908B7BBA08AE157F7835E2F947BFAB5920CF6243AA60162D750D846BAF1B63D66CA04F3D168166FC5E373CE2
F0BEE11AABA28A152E81FF913D508B9C13B4510C1B4A25CEB95E088DD8EDEB077969CB160239E1321723FFBA73AB8ED9E4B1F260313AFF16B153F262A67513E247FB855054D58CE40F38879BDD9B062A3AC9459999F57D1A1929EF9B14D14CA9D3B8AE14
622FDFCBA404A2F8E1C100C61B8312D22D233F36E0B93303510BA74E457360B4F7D9FB17CD4048DC9512F6C46EBCB5FA9F9CC4BEE8D4E0A272CF2B043F9D5FA981698AAA60E607191232A9BF47497D7533D16C7AAE9678A39CC8C6BCC82E4BFE3434BE27
B3DA0F68D3B3E7FA5D775E64DFDF8C7B4BBB294B47E912064DB7631FF640D7C097CA3B899823031F1E7A09710EC9B76A841AFC35546FE8333E15266ACFE170AF083F40F8F091EE3EF19F47E41C349F4C469131135AE9036A086279A88B997D24D56F88E3
314EDABB7F1AA41D3421F31B60814ADF59294890795A0EE0AE30264F29E3E75D81D4437E0A7B6B623559F62A9E44450D67FB1CB9D6031ECB5492A35D4942351DC540BB629E72F77A722E1874993EE13BC5861A394F136C33BBF2F6D6C38A377FFE2DAECC
2E3C3C93BF8EDC0B5B36010507195F4528826BFD769839207E2408CDF302EABD0C9173C1A8A7B55F8436DF6F998D356B4A61F66496EA9B80DAD40684F2074EFB42628B0EBC694A30DF71969F2B2DF4C68B9E050A01E8E5DE0A1B353B5A8C500F02D1C1D6
E5D4A07154581C30DE49A70781DBA70D87865C3C4AF37C19EC82C0C99662B13327A0BDFCAE5D5C761BED5FDB00125E1E7D37421BE098CEA602DCD1A2B49274C2FB3555416535371270AE9F72BBA2FC7FC191C47941EB6BDC6268338354C7E173E31FBA3B
5C17605666398FC4097C1398D6BE6D311DE5CE58C9960EB5672968C971F625234C0F0F2DC44D7A25173B23FA3C5079A4A4907C2B065EACC2A5F1DD1FA5B0B53494AFA115D556A30199CD4C23831269C4728E4428362D88AACAB45315375016CADB728A98
CC71D7933A7115C31E319FF38FF64ECD7AF44EB9CECED0BD0E7AA0514C57FF4E270B8D1F282E855008659E258DB5BEE37B77ABC34290BDB59129B1A5A281167281809007255593FD1046E0D595EEE8D1EBC6DAE4E6F9612139C3D18F188B41FC24795872
2CFBBD3183F32A36A32B3C168CA1C8FBC853BB9D4EC7CE6A16D75CF3C5F4FE71F5921F2E4B508A0A5663A5444720D89CA5C9D9C9DAE29CDAE3A106E8311D818BCA5CAB921213CCCA021441AE8ABAB463ED5C002BC3785EA005DA708586287D5A7E4BE75A
BDDF3AB1C325BA81AD204BE892528B0C448766ECD621A2189720A8B8FB2E42ACD5A385841BB4492EE3F3D7637A2EBE505D32D04F7270B15368062A47C71A55ED95721F0641A49A0FBC6C63A66A8DECE10208F9C525CFE75F81152ACFDBC3371B283AB553
46C8D229AC499927D0B00E32203478A5B33C04311F4E08463F3987D915B786F98339135F7845AAEF8DB390AF7BBB1BF708C22081D8F68F10070D7D40B277956B0EA4C6B3A5F164F63418C3E4649985D134CF5AB73A0D7E152515A05B38586AD92C55D99E
938327373518CF526DBB986290803771FF7C2506C57D0304D5693BB11F4E1DACA08379287B1F458C3CEF6DD23AF578D8D48C53B5B50EC6115FBC83439D83D6AF48124317DA83C7197E33DD4F826F54B14C398D5F0A04107EB75127C3CD94F0FC4A530CC1
E552A6C750FC82C7CDDD8525DA391B8CFE1A3677BB942C1A5D82494587409A85A2B590C5330A061106F9FD0A470EBABC3234EF8BF00BA8E28EAE6E37DD0899091FC1D300F43E7EEC691E276EFE29B06EC8220B741C3280065FBA65F7B67F70B823D48F50
C43D51B8C150E7F3DDED0C6A7A8B3AE11881B4B3492AFA692077C6E9D99314E1418012C417DD25070F70145FD99B1F4A117B5EAAF85C87194421812412947E6C4B887037E5776753155ED9854820EF819B72131EC7A24FCAA2D1327CA005A02F4CBA5B7D
3A2AC625CA38EEEE7B063979E2F70FA4BD5F23B0836EDCF44F4E9A10A6E463B24E29473922637286C9BE5A45C8048F0CD33EE06295769BC4540A33FD565290B958B373500F5C2E6E9A7B009F88C0FAD86B0F7426EE1C31DD00FC22B639535D7F103F7925
0BE103FC9AC968D055432900A92B8129EB97C4A5346F5767BCDA27158B4BC70F62656759433D5E6F244445FE632C5978C871F818D5633FC9662F0C543ABAF9423442E85830DF4F963402250E52609C767E705DF11221A68838BE1C04A9C039A28BAAB653
B57C19B5CA4C988AF7D86F3E33187D3278C4B2965AE99AA7BACDC2592F71CA30DB33B96245E64D89469667D6564A8DD9D362F54C8B31ABFE4036CAFF77150CE78743583571E6636F9189BDB459AED2D944AB041B977D3320147ED3002B92AEB19F2A40BE
243E7F0AECE846F4B74B552588D05D7EB51CE3FF43A4F33A7FE5A67A4217DD89962FEBC519904383B0BB7639AA42DD5368B8E9DB79357B07291D855596F557B3A44641FA301E99E6DA38D3EBF3D23E940F4F1E0CC7CFE13DB4AAF5BE12B0881B8FE5BF9D
F1142B820D96C7D0887C0212C48BE4FA0FA2D4E534F6C3A2EA551520C023F3A50DC6B1480727F8E66082F95571C2CC431E67D17257764C6F567CC9ECEBF3786347056ABD56BBF80ACDCCB90BACFFCB24AA1E200A67A259D5C42DD5471AD3C28AC6CF6726
4543F78586E2BBD429879EE2EA9E94B06EA2C2B1FD609054F3DBC1E94D86EA73A2537227026AE53A067B7B244C71D9DE4972653B17A6F1E7127BBAA421EFAA3E0342365D712D4FF5F4912BC1DAF1818D672648FA0069586FCD25CF8A3F8E317AA7337BDA
38194E5B2C9748DD0D87F84CD5854BC226E2C999468E5861957D99CBC54B352E6888470546E95B080DBFFB7BE1EB2CE6C0A101F3357FBAA1B44A8A569DBA79A2322FB6182C59919FEAAA4F2F38CDC51B34AFED0590681CE3345D04EC045A00D24FC63990
67A0A3B897262DB529AA7CEC0130D6A12E2329C5C635CBF55BD0D21DB8DB3DB8D14C6768E300869FBEB14B10FD99AA0E8F07EC556C3E9E8D85D00A4179C62C68987484288CA29EAFA6CDB429D93D26289348B8546257A9273D6EC7B1A4532EE691A06A6E
BDEF4F81ACB5B55FF9C9DE1B9757DBBF2B71A6C0863E282AAD004099787F55C5173C562BC9B00C6742C512413A9DBEE90331D7F50EBD0A80B8B73F9D794C913E892A85BE5DA79B02BD0186884612E1A37C9388EFB7EFABD74B1E1F910B924F9268B4BF7C
808544D211B22243B787F67CD00E02E5EEA7102CE2AE3FADB73AA09A1BC9D7B810FC6FA724D5BE159D7975BE396B5E735061E6A50B6EEE9148A484137449584569D02BC50037AD3372F467131BDD044A7EFC6B4AAA426B0677BEFE28A2B3DBCCD8B2BF51
54479B7929492E30197254060BECCEF22531F68D108677107397EE9C82A6AD50AD76206C31E29125393EF045C9EE9D9D56B51D0BD0C663A7EC157BEB15B7D0A0219643CF78E14ACB58068D9FB18B1A665926E12E37E1FD0C2F72D80A1736D767FBE14F9C
795EE07D0D0A35829D70F5292183302B3EC83E7B48AC0A7B6F234B64E26C3BFAA2AD5F4E0F8A10BD5742495371675F0BCF45B04261DF19CB8EE4699190CD75346684CDB60EB6C19804C8F111E0033ED945E7381F725EBE6637175E12C4380EAE45CD119F
B8C264D660235C6AA30713AA251A1515F969C2C39C55D49E083E2565C5E7BF9658CC9FE98DA72F8447E1FFDEEF0D1F8A13E0D47B7CCD1AC13C9A1D66C9DDD27890A009AE11E7E3C2898A157E663A5DBFED4DB19FD6CC14484BF6E82D7E24A6750D86E1FF
0C7D5070B281132D5497DED1079BA0EBF26370B669542927A550B40847DEE39D357F00C7BCB8DF1826E72EE016BCE3FB4573F4DD74C06D70DBAC48D0367C763559DCD767612C10D38C2967B9EE0DAA02AC857F42EB45585344E42A5AA6E802FA95B62543
80DB0DE0A018EC50BEDA28B434A297CCDCC403B4C786A42CE9A27BDF57CB8B47A36A11127047C650AAA7A355D5AE66902CF9B44C084F6CC168374670A58CFF1E8907C020B4C57019A2BEB23F63096762FF7CD1BA07767FDDEC79429034EA3276CC242364
399D0E2034C930A905E2933609A3496DA155BB4513E125D75F29430499BB54A87592C729488B4175706DB25330FF0ACEBA27FBFC603527EC5474EB53F04B734DCE715F5C07D06B79041C7C8E7A52EF72908B4D4C30F38A951AE3680FCB7809BC88CE44F8
1A21075AEE166FA1E848179EF275E2150C00E37AA0DF1D4F4D57B31E2A8A9475D1F3CE8044C59F5CE1E31FA1F078826BF49C802217965F6EB73EE1258ABECC275AE51F3CCBDFC485F7E05F3B98703BDD55FD6244085A61FE9C1C9C1F3E694CB1004D58AC
2CAF6BCF7CDB66B07982B65730F573A4DFCE6B7C7AA590E1374F295A9D618933779E9D8AC73AA3AD3F230859FAC159576080EBD4FE594E1970358D646E60E7B69449B67D8E253240CC2333F9344080E0AD9E34BE9B067B52C3B0298BA60756A3FF8F43FB
A48F5E2EBF17F6DA1DC7AA80AC53F82E418C01C8A2580B5902D6CDCFC0798E07D05A2CC1FBAD87F6FE082DD5A38C8826B91C3F2DAF38F093F62121DD363B807197A1DB6F9ACDAA85B0C5D9AAE9BE584513A4D098A237B78A475D6AB39660921C8070C74F
884959790D50502192AB248572236B97F33CDD3CCF42DE12320CAA2300707640AEF7F35B568343BCFC441EA42A20A4C9BFFB983DEF4EF1097746899610AD20784EDB822B7FA7A0EC777D4FAC357A770ACFC3A11C2A0758AF1410CC5BC089DDED42B3F23F
68180812E7ED9B529825F28C70D522001BA6B6DA061E1C61584A7DE115A858376A07828468DE7CA0B4C07EACD91FF136BAF1837B89B83BAE4CE9808976F45FDBA88305CB7A13EBF7100606DE18E5763CF570C38992123E6A9C7D901F3D2EE28DADD20AD7
92C1744CE14FA7817D97E584A367490A2CEA912847004FBC345065C51EC0B5E948D3895A328C9C58881FC3E749AD1BCBD82CBA1D01122E5173116D7E278FD7E264C86DDCB46AA3CD3F54F2F0FA6134165FCEDA21C4A98BE9589222910B3950683F02D46E
0003B3C3B40139C4B159E7620C73FD3DD315378A609060E8EFCE73C07C80AB173D20F9EFBECDB925149AB89B6C271CB82F88777D747D39880F4AB88C74BFC26E099CE085E106C60ADCE147F008F2547ECF53918E87E813D5FBB149CAC53CEAD7B789E234
260E20F252AA43B626D0C646B5BF01FEC8911E2CFD74ADCA5E30C05B5A2F925D5BB500D80519E2CA3289EB664F0305C0B15B8E79E98044C3D8E11CB35D3F5F67BB6FF81A74CD7B3D428A55C2D0BAB784056650410A82F37BD7A60E6C2F0EC5DB5784EEF1
BC6CE181E164883D655813658195B9CAB89ED43E5882842F23DDB0563C728F1D14B2926410EDC744C57E54DD0E81E330C610C034AEF218910D0D7EB249D67BD21AB75B9604D3D6CD9F15E2B3846EBDFFF86E9082B1D5C5DDCDA68B212399D0F0053EFE32
36DAB6EC0DFF10DAD5CCC44069E8FC8C2E5E0636EA138B9BDF1022DADD8D6AF9177FAA3DA28DFC7C7716C106AC06980BB0D7C64CD8E65C989BBB8D6D3AC6C41158BF498DF2E92B575DCF6BA4FD380452DF96AE2C96099EEB3CBAC18B7A31A082CD01E20D
E3196A7AAA1FB7C14050E6BA0413586A7DF293EF0A131B2E946B1BD8CDEB0B4A27511EA6247B11564099F7BEBF6EAB8BE1A6F5431507F1D281A2A4BBA1B91865E0AE2ACBD6A42311BFB28E3EC4B6396957AC610873D2F01E750CE623D63C725C417D3736
94DE4756B64FABAC06A1FA2655E43FE2DA97E68B6E0C9891B9EC62C3A9DE60C7FAFC7B0C2ACD725D9D205017700F714FD5177500510A6D969DF315EC342891235094B1843A73427C5EBDD8BFD4872D6D6C5B032F32668F3DA96F99DC5A681BFD1C006CD6
A095FCA494272678283E1302E46DB1C37094CD3BA6061D515DC4D39CB5AB0D53B38694256D2E259B02D972F4499EFB01D7E05B37F98C16465DCEDB02A8B6EA64E57BEAA688ED08F18304557DA93A267B9E2B29A77DC4911E0FA7F67CD9D60EE4A151F696
DF7A875BB2B441F42CC332769DDBD70EF953A0C6F57FCD1EE7305219187668140126197D3F3010DDB808586D92550379F4280EA88BAD4F4D7DEB5FDBE6F44557EE7D895E614A872FB4C8B03CB5489189706082D0CAF064EFC77BA48E8160387922F9938B
019108D2C94E4FBB844B642E073CF0CAE28EFFD0DEF3EADF9603B0C64C9170ABC876810DC765E7AAE8C0957F0B1DBC77B15BDCFA38990C3EE97D2251248D5A1D57B88AA1078407F266E981C1CECC3DAEAC08A16811584FB698CDBB6DAE4B9C0567FF2DAD
03261C5804A065A55B3B23196E69ECC7302EEAC5D896106895121058407AE1F37DE8C4E74C601C70F84AB62B72AF7F715B43CF899251839D9E59B04CC976E7F4602CCE162C024711EA07F031F9D08B43E73D454EB41E0B18D4A611A2EB24A050D6C5F276
83FB5C1B79EC5700E6299C0FFE0ACCA31816E7002B458D89AE0A55F22FD4F8997F6FC98C314B8F79F89CC04B90ED481BA4CDF2C3EC140AD5FA2189D4663FC4F7CC79E91AE9BA6B29E78111DED27BCE9B65C01332AF97CE3ACD94C6FF7C23C3F333519E12
1FD52D9AE0A1C4D258879CDE84CB4D6EC5B44F8915D087FCF12E2B2703EBAC5F25CED46024D619D62A5823E22A73C91630E9DAB595EEB158B0EC17922360834CDE764BED94A207429EBF48C107586488C30323477CD07483BFBDB5C80449496BD430465B
E5AA9A6521127B498D35208D8E4547E9C2CD342A6B8FDAF0E1B803D87839A1088DE19C8DC9668FC1C9550E26D3D48CCC7BE2C0E3C5536CB5DB4AB1DCA42502721178A0C63C52292D373BD01299B1F55D14736F80E1635579AAD5F758C81F9BA1FE306844
D4085565D766DC39BDBB895534F06B800EA12EA7A9121EE1990C6BC078272C2302BC43194B56CA2D359E5BD93D680CC1C02A0179D4B499D9C3292E890E32436CCAF9C56CC74DE62FE1C5057189D299C2BFFDD0C83558B79D78F06E819F78CD1008197F6A
189B0375809D41854E0326EF7E5160FC210234B65F4A52594BFC4676C9875059695DFB5F06E189A79E5C05715C6A57EE68F2BE15BCD487210363B888929875AA89C825F8DFFA55FAB4E7FF19A799BE30C962FD3C4720AB747DA44AA22434D2CEE0466987
46A77FF08015BEB3342CAEDE13F71F3A5C0EA6E4A804B069FC96EADE2CFFFC61BFCC2B4C6820C4247959CD751B9FF88BF383D7B816BBB103C61918582C49CEC4DF8DC6EF8278D7DA48494D6AAB6FAF97837711F9D8088481F61E71C316C84DA247F67640
2DFED101D64B3E12B298F85DB0C05AC115157544AD95E39C81006FA711F2C172AE2F8B14117BAF3F2757C31A1434E3B3CF08476E94EFAE6F23C01689F7AC6B44478733E5F209E5FC4C7347DAB4D62E351571177FF723AA300BB3F0661BCC1655A1C960AC
BCB8A6AAE5506E55F5EE976B11322A46608B37E15CD35BFE8F92D84B54383AEF961F107738581EFA72BDF703D0F5C73931090AF5ACD2CD9D4ADE4667C79790958CB86CCB47C1B9BCAABC3FC083B35F4987BB470B94E0AC969CB50AE39C1AFA1D5626EB6A
FCE80172DB94AF2E7586008DF1BEE85F6BCDCD201686A530ED7F4F8CE82EC6217E47FA2A61AEFE84573391E69812D4C194C4EF994381E9908987F51E27F4D25C5186A5D7BC3EAF9C2D280595ADF8FA59B673B0013F68676716408F5438804ED75A2461AB
A76FFD2F5DB2831E84BE3E285C7BB9D0B550F4BA115D870A53924F3C220880A2724B0893F5656999310184E890B134EAC863A19A7B899C94288C47BE56B46BD20E65ED7014C5B250A312EB94EE1C0EA69CBAB6EF0EA34E366FA4AA2C5DF18016EE3BFE59
B3055DE72986B9AA592CDDC90E1A575AC59148B45AA7577B471F9208A296B5FFA964C54078B5BEBFE44991EF80B3B7A11C8E00647935CCB465BA962E2A4F5C65A152E005EBCD5CF1B3A9C476FF7093358A62BB6307C6C20DCF85BFE16CE84A86412CFB50
61BB789EDEC34B732FD65BA933D51144F5347C1E222CC04CE9BDED699A841E0376EFD2CC0D760D8556BC3869A24E641935E7967BE3DC38792BA4D76C9A9AA5562C6B10B842A16C3A6E949975C43BA8718DAA2A5E703E7D7FDFB9BB067CB3B6B82574A52E
A0B2E37113497ED6871DD2CEA0C5A6D3529B06A284CBC4B502C731CB96770CEDD7C1591B440005C63574A579BD7D31504A2CD04D99CCB98DB51B83FB12FC14BC0069068A641EF379D7A75C8C40E2A404369678418F8B139FF0B2195CA0AB8D4A483A1ED1
E238DFF2EF6BDC32F1EC3D90C7B9B211BF5BCE79FA2687B2F8A8E1B1FF4D3BBD7EFB72913347584D654D67B2FC8BC31523F014D8DEF2BFD86D8E94136035C790AA16054BD5A02F65ABD35BB8CDB88D44BB6866B4AE38D3C1A377905D3CAE5BA72B17EAA7
BE6899AAC8BBE291A95911D0E66F9A8622D4B3BCA5C82A16423AFF47077EB93A822667A5877F62B41DA086C8A08D66DE34AEE11E0C430365B08600FF8CDBBBCA044BAB1D0BA571AE61397D022316AA65B9C4E2BB154C4D1B677B7AF288C5155DA8AEF50F
ECE7011A6AD6E01EDDC4CCC6C3D9CA16CD0A678170CEDD0184B1B200B56EC2DB9B1758E2AD44E811E8E195C4E7A9D4E931E622DAC2CD44E0F9A2475028F513881CA8B99ED8C35CA28A2642EA763A848B5AEE75D02A846E63797E0E8D3D2711D51DE2098B
B48C2D7E0AF1B4FA080CCF30BF52469CC49B8438D14A04210FBBE3F9CC89B15917F1FDBA807E37F7D90102541A979273177485F04C10F993D899D60C562B91F5B18A47C0E8C98314082010E19A22974BD822D19058D82B18DFB4B902E5E54170B991A7B3
01B6E39E9A35EB5896E5919CB019C8CEFE6EFC7F97FEA8BEAD6442C1263ED20D28CA726F5487ECE4E93C725BE721C790C07F898479423B52FB1B2A530612244E61F6C246856873CBA8410F49764AA5C350FC97932140639CCBE0B38D5674FB175D2CC8F1
A2935527F49FB92D581FF675F460BFC1F8E32D6DB4CAA9453D3657D08DA126EDBD63B4F24E5E6577E5F9F106ACB089D205529E057A0B7A8B9B74A36492A6CE0608049591DB77CEF96A8A988E9292CD878EF8026F9E975F870C2C122E1D31CBF2D9146D05
2C411F53974EFB1B9A975667F9CE5EC1EFE4980268717DEED204D06D30B538FC99D26DF5640586C66C3657440419AB1D9DDD34CE876A727EF4CAE94CD7E5BC4C7EE3F7B2386D1CF9E4149C204619CBB9109AC3137CAE58D656D2F71B51AC3D07105D2B21
87181DD18FAD744A880694AA40A4DB0D5A60C9C479981EDF22ECC7FD504AC8445BC4EBB3ACC9A7019E155B17B524F4E63FA93B3992B9859F829BDE9D3A3922D585676EBCF2E71D0CD1BF6AF224A52730B01C77D98BEC0B2EA885BE520D44107B0E1128F5
CE56A8E23AB0E559FCCF32C2335DFFF6DD43FA112F0FDA1BC9B58ADF0EBBEC1E3B2C9A38F35E0870F55855DD4C3AD3EE6915FD5801DA6DF42A293276B2CF49ABC5803964B6E747594D2098F92A8F5BBD86EE3D971854F11FEEDE85E731A75E9526B4BE21
34AEDC4EC620C00A116ED85774097A809685A3F4D37DAE901D31488FF110B55DAD20A4754875E7E8A951BA3284E577E8679335594DA2FEF17023CA5F4CEB3141C4F2B01FD64969316BA9F8E174DD7EACD04178D2DC3F4433F71751F0B098374BD555119C
32921DBD52A5B02545C27ED26D83001E49C772209616238609D2785D2ABE565810B2FCE2233B157FAD3A5FFC9B9F78BB0866A3E9ECE3E697A1B2E56220E2ADA628CCF8C972658D5A2E62045B5AE1C6BD3BE3B3407ACB2FA156CB21AA7DB0D7BC7E9C3FB5
9196BFEECAC7AAEA916226B7D2BB3284337738E7AEECF65540E35DDF5754C9FC3035C330828B8EEA3EE7F728C98C1FC7F3463E5753ACBED5D0D4B480719E35304733767F6BAA52D791E01E47D7009D27D06186189F11AA54306638718BE9E192C6B95013
800361113A18061811D77D7FCD87DB54D97C6CD43EB014738D5F9BE7BFF035B6757C78C88B3B36E7D5D7364DFE00DA7B76EAAEA670220EA540817C7F6FB172FAA6CA9A082EAF0DD917208A17C5917BBFFE01E4E5ACE245488A46DF44A9AFD670D2B3838F
BDAD39912692F448C07DF7BE1FFC17C53FEA2E610510F64BE4CAE3F2E3DC62556F8F23E3BF9EBC5E013CF4023799E7D4D3B262839077635FE909CDE51AB334542A9BB031A2D4615B3D4923C7221FD5AA8C1DF7D614F29AC5980E191A1AFAACF4BB4BD70A
10E5B56CD92BE726D99D1CD6D0CFEB250318CF988285C31B03054B2A9D83B6E15ABC88597D2AED835415301218310A0AEE00299D920256EEDDF43EF9A1B0EC0C0D7EF0EFD63656456AAA15FAEB2C25CAE86E883AAD86290F3893715E48C4ECA907A59B72
077514457A18EC35330725F38D344CB29EF41396FFA12C750AF912964F022C12750CACE4C31B704A9472CEB50FB25528B4B1851FE6FFD58DE18AEE768415200FDEE6E2F6959A97AE4A6BAA8239E67C9CDD7A3CA7A858FA069CF61745A624A80AB17B11FB
32AE20F5B0353106FB4D53A6999C7740C7C3838BDCA0345B81237894558864883286E77F5A42AAD1D2B5E59CA9E5C2381FA0F3F3CBCF1B3BF9458ADDA79A468F80C977A969EF5569C05A2C360A707AB3CF7B2DC8E532A98AE0801492457B55B56599A2EE
C80B1F3724777400EF425057D36BD8B8FE1873A67BA2B5DA764BA2C205A563C7701ED43B47DA77E861A7F62096A32B25ED45A1D8803E97CAAADF245A6EAD3191C563ABAB984D97F252B482A73EC481C03A0332A729C0D05162D051EC33263389DCEBDE4C
29428353DB15083440E9748B1E3B85930597C47876AE3335B3908032A90D85472269192170A0F8278745239F67FB2053B48B3746C17C13D33AA520871506CA18965033B28A94759BD137B262EAB8A637F7670BB9EE16F2A9F6E38DDB2FD0DD0153342CF3
E60248678D5CD20CEBA42DFB04BA5E9B4C1E5F95D2B94649C6EF260D126865E8A8E20AE01C150892427523BA567DD4DA05DBFDBC2D3BDEDA34138E2CECA6AA75D473952EB95A18E3B8624C8053D2CCEADFC2C178B4E089619EA6273C3B0607ADEB96ED49
49006C16CC624DF41A9C223C368F6453CD95CF4949D69F0ED49F99634D7FEF63E6122DB696C4168FE1B2B06EF03F405F9E4622A32C432FDE6972F137306CE8D12598A7EFE2BFAAB59A3FEF2653A64F4092E91D773086E8A478EF3DBEF4623EFE3E3D72CF
9AEBF226D5106EA49400255C68AE9CDE9610D3510ADE08B9775DEBC0AE4910A867C78D58DFEE62ACA50A35C2CC6D131A3D48772F36CD65E6634A0759DDF5D942B37A3B5A0D0E2E9A138AE1BD83AF3CF313D01ED6394D03EE6801480EB155FE98C29D88B5
44D6AE8638F87E84F9912E556E3B44AB2076EA8E5DB1B01D0BE7E2412541339861BF1FAFCEFA45935D4E6C7F0C9EF1E9CAD2F8BB9AFD91D5F059E6DD0833BE4A9434141AD772722B5811EE06851FE95CA844808FF3377B6192E8C34DF5D91D849F676981
0652358F57433B7915FF51F4FB8DFF4A316B61CD4066D8AD8303A95E49D8162F3FFF1F4B35C17BCD6BF649B3D660C2CB39E8E619D1035AA65082BCCBA44FFFAE47EF5DFE07CB6BBB5168A81AE1E10C75055A562427ED6B0186096F07E9F94CA5E9A4E51F
EAB5FFB9D6BF3747E37DB0504CABF81EF1307272E4FDF1AD1B427C0F1F272D2A7B6AA7978A96E19735EE6B700486214B3BC4002B7559167E5FB2CCEE44A80813E8BEF171698CBE5083C373B4899E3B80D0E6B1F33311186B0CCCCAD97DCA8E71DA67E880
C745E1F7DBF0415DD2869B08E7C721EF26F1F5D95751C437A6C9A092485BE72741B6277682D524DCBC2384FE4A8BAF5E3A5CA63A7BC294A735D544CCB4B7FEC3D5AA79EAF9F04166EA23DE5A1E4D4384B8B10A89E3F353C0FFBA1BC4DD5B3A5E749C479A
115E0E2308FAE62D3E5CF579242C638AB3F7AFA98E8D148070A81AA1D3AE20A916E1BBA615A9AE960FB629CC7A548FA347CB8DE8F0042CDB92C19B2D13A5281438DCDC783348B3DAE05AB8B905ADCC7655D6E7D9CEF611E8F0FA64147764A8B4A2295050
0271B670758D40580091686CC3B90841E28CD71663AA3C4C28CA361C3340D184B2AB47D63D6C35CF846735A2A3A7E9221E13B02DA0758E0E5D5E15C188180690576AABB3843C7F6AF125133B8DDD0A2C80DFEC811E69BFA13EE6B5FAA2B40C7324F30CA7
F653CD0E44D99AFF8000753A3554E2AACA99298AC17F22B6E3F96F01E7BB293BD75AF867CA53D59B733DBC2E2E88F9D38B8D3676704ADF9486362D46FD779DA1C5E7CD6485E166AF82A1C0CEAF2F94BC069A61726068ED8A8407BC212F3D5E0FB4D29D52
51A1EF944EBD31F12A7583FD3A30E81D7FDBF187A34DEDEFCA9C868D59801AA68B3E7F3A387002556B8BD1F130A6939486A00426D0CB6A00B07191A15C1E885B3958C77242C928E5C901464C7AD5808B09D33539F30C286AF8697CBC6726C1456C8D2EFB
3238AD2EF84B2B02C0D4D7BB526536DFAA245549D60F602A28E951AC7C370ABC323AEE57CB4C5C914A9AB056DC50320D9E597A82E75B7F272DFF03E027D75609073CC40187E65CEBF93C4D9AB62DC337844372BEEE13204708A008B6C9B4C47D164A4A15
8455886157BCACBE682D169D8FE190D8B8D6FF99524C8CEC77084932E1F9406CB12E2280FAD8624E22776A8C93FFB19AD2D04BFD1F912C049FFE70F71ADFB28CE58BC804365565E58B68C46C4E0964F90B237BB3BD0DB1D85648D7B3D701D0F755F192B7
E6544038DA1E877E32C83E15641E3A80789DFF880EF3679B70D232A952D471401E9331EFF1B66D65F5A995CCA15EA26F832E93649AD86A612476F0736ADE7F3FB839D7B6E9181F4403FC9CC0BC92A4E29AA84262E93A7702C506B6F481B4DF803E9FDAD4
96FA2A3E6D5A9BA39317D94315685B1E6C9FA257A5DFC4029A501CD52BAC9966551F9A908FD15D71FF441225432400DAE6BF1BB899E4E675F6CE93EFBE5B0182F3C5D710A8C2249D9BE0B1BBCF58B45B8CD38D52DEB8633A6F2F19049A8EC569DA47A993
4882E368002A56752FC98413121027239A9DCC978D98501B3FD638828F80B9E8DC983479DC78CBB9FD0ECA52645F842CA7849821FAD982FCA66F182BB20D162C00254089309E84620D2B5168BD186A9B2CE924422E82C29320B2B6EB4F9776B283EC5218
4EB6F273FD09FAD012D8884AD03A3432BFDA4555C94D87D6B5ED0F4A8766C9211A10C4DCF869D10B17FAD7A671A7A77772C769745E6AE39C63117A1558CB05518C0E2434F82287B8AA292B07A4FA73A27D4481DB4C78C7A7F3A766EA7DA180FEB0CCC60D
73FA752CF45D6139DE305E45BF1BE3DBD3462705CA5801A5D224615C0E2B893BA70881101172B8B6138956F41C9839C67D69EDB355A5FFA3D8CBF6018A99F9A5030545B54D695A665AC21C7EC253DC189344505074E4D392D25FAFF59329EBE2651D199E
96DA00A0646550E1245108783DCB1DF1B4F7DE0D595220D6ED55E2FE588F4BEDAAB0EDF18EEA074764C88D28653DFDAFAD52D2BA7DDC95FB88079F7B979CC5BB6314BC46FC45A4EF0D31FE1ABAEDDB6A0272D3C098BF316A139C80C7FD14D91F68111572
382546C2FED3F9EB902EAD9E69EC7C427B44752DFB27A97A43C438CBC6FDA60C1DD7E053F7AF4EB6E893A30A3FBE1692CE2E0CD214C2AECDF43771689972A1F871B42FF1FCAAFF514100445FFDA4EC19268CE72AF91A14EFD47B3D67DF2609EF603086A7
3C6A699F22B665FB8DD1AC95C5DCFE3F3662CBFC540F22A5386CC6F233653C5920FD1E3D3615910260D96EDD2B8E049C7BF6D02D6741EE6352793BFA3885B1206343578F5F7A87C6347D0121CEF17A19CE49E47CB28A833D3F1B0BD8441EDC313DE09BE5
0DE67573B8901687053699D0ED3B8B5864DE797B6BBA4CE5EE324B557EDAD9D69153C3432E21CB593482EE1EBD816FC5C03A57A21AC08C2497771D9316C3C71CB8749D21CA4A32E12B3367DA91E1D57F4AB8E4D5765675A2EB98EABCD24FA5DA8FFED3EB
636341A9C2B51334B25D59EF323B6614307B0A213B233E699487537C3AE4B21931CD4D32DE946E8EA9D56742F8FAD5355DEDF8D20E04572A1869194E2593C7C886558177618E8601784B08E1BB907F30C23EF0C3E37FA74483C32300624FB5BF2B5E99E6
A8C6360029AD98D2E0B36E340577E71EAFFEDF424A995E8209619B0E1E084E1180564ABF49BD521C2CB45D0410BECB3B364AD1FECF8AAC90636E76B12FB737B3DB314B0BDF81E9A75CFB4220143EB0F9211A9145C7B536E1299DB98AA713AFDFBC31681E
50708CCADE6CE59EDC9B41BAFC9FCE10028D61B718962F7FB82BF7CB529D37C42DB64B3B8FC72F4D7DA816E739F59214D7028FACD57090E7C17C74C9C65DC9EF86D49F3AAD33357A02DB3358D54F94E0B67104EB0150DF5468F4998E23BE4BAC2579277A
47F4CD732C50175B520090C4DC03A7DB3F5822E77DD3E6A261020D50EB01FEF6C017F1EE510CD7C0A56F63E7ED3E08B16D05DC307C5A90C330043D0529C2F781CBB0B9802280D92D9A50085744BD157EF2AB9C2BF55EEEA1ACB332CB124C43232075403E
FA83920E4E6B748389A7D5E8F75D923C8AA9BD320BF13E0D2E7C64CA99D6BC1E7929124D901A188AB364A7B1E6720004EBBFC9790CD5F440F3BC48946F287E5F54129C881F2EA8DC301BD37C98540D3ABA01054B5D262460D7D674FA895ABF71B156026B
20EED435A41506E7ED2B14D6C00FA951FC164949133784446C8DB853FE52C9830CDAC5B343831648989142FB93C497FB89784D541758391D1B4397B8A84EEDA5190B95617F55B95F7AB8A5AEE9BCD2F9B8A98325B210BD1744CF7CDA107EDC400CB7F235
7BD0E9E7DF2B34DDAD7460E7946D8B40741923FFAC81ED3FCC92A13917D55D54FD631D599481CC853AD922225BA46E3B80D4091B7747878842C61C6714FD7B9107E733720A4DC03242B2CA093382CCCE9F47AFFBB9913CD4F951AB08383CC30602D0B853
3508C12064D9AC9AFD291029DF71CDBE8D02F2954C4D73007251906C0810DF06B18866ADA7C0DD95769BF6BC4D4F5BBBBD6063E8EE538AF1A5209E455345CC231B358B7C69B64A7AD41D0EA4BFDEFF215220A077F49619B36A4FCC237B97FD29BB81CC1D
79506BBC9E8C1FAAF127AA780ED89D60324B22DA18D284C078D617FEFCB0462994A91F9F13ABB139875763BB6A0E519438B1C448D199BB1893938795C24688214E540F52CDF8CEFF78FD5AA0CA9960DE46ECA60ACFE6714A9F1A07A141202CDB1A99CB94
5156E7E92374CC8BF3932D08AB3510BBCA6052B5E20113076D55252E853A1A5661B095B579EFD88868AA62BA5F076B2FC4165F50A2145279D0D7818615E16DD43FDD0DC29C48C14D5711367CD5DFF41B5874DE92277EA2B0E40A0BBC80D5179626CE9CFC
889532793B043C2CB3B26098425733FE6E49C0637B30037CF23B668438ADFB9B1555E587C05A1AA2C0ADBAA93594AE4EF156EF20EC4F3CA589BAADC2902C1A590E7F522E79FDD222C08A2EC023705FA17F385865C35B617186BA7A7F89F2D7C645B025C0
54C9F52CD7F87FB3DCDFBE5F48A3FB3EE8053C5C3E89EEF7DB0539C6E1E143F446537DA8A55C88C4E1D7FF547F06D9F75D9C4ADBCDD7D9891F87C4D70E1BB447BBBEA89D5F3D9A746D8C5BE156CB81D48F8EAF46AA559167D498EF90D398118A1421BBE4
AEE4C372A070039364CA9D938E65945EB214E5C2DA31E6629A1A381DFBAF797A2A0579845E2791173CC1A21245FA8435467D2713A6CBCAEE259BF66ECB5A206DE0CCC59B9291F48D8B61913245AE94ED5DA81135695E1779CD163CD3D114C5761EB4914B
6197218DC1AFCAEB375D28A8B24A83DF4955973A03D19D45EFA2CD21D0B49CF07871403B10452F68C30999B7E670D363A96F92A3225C158E7A6FB2858DBC4AFB142E0C55A5A79AA27DD1735EB54CBB6C553D4F67D99D4325F929F967240F5E8BBF42B054
1D6A6F89077F28C1EDF43D7B3779574EC63587E647DF322E7E3FD281EB95479097D672B5F3343CB717E8A784DAD54AD1972B324C28ADC539144877D46208336B0A73D4C4C4AB68839DC0A5C6AD43A6786A81E59649F11083F2ACCA7DE77731C488382E65
9DD808211FF772A5C9F125E477471D04CC9E428108CFB65430488FC0F1DDFA2BB28701E064AC0B19F8CDDFC267C92A48DF2D42A38E9CDD3E2C0EB06398C9852F27436829BB64B6478A20C279DD18A678332B801AB18586DF6DE236F974DE812AA06A37AC
14F9612C5F8AFEC368850A25E4E18A959308D60E42F52610E125C4AE7624EBEDC0503236D62DDF4B6A633137BD83FCC0B48F4C862763667AC84552C3227B0EC0273BF8435A796E024884DE4618C6CDEBEA1FDF2586ED3AB843170258BF9C65E5FEF4E151
CFF7FF59C890C37655C87B4A2F43FF6294B9A3AF257E87D8CCA9D5C98D9F38EEFC72E4CEFD5DDBE792D8B99113B9FAC1D47C00D197A3B16C1A0C4C64665690DBC9DED3033FC7EA26D384823B1C7A5A9ED5CAB77571397DC4C0C5FEA94F76D420D8C37B39
F1B69998F22446574C5F52AA3EAD7C201A62F45E1205258C98771E3EEEC396C05A0EF134A088BED72E9DE4F39CF3ACC1454DB7992EA4F70E02E5C467067BE6FFAB32759AF4540F19DD4FF0CD45F71E096AB3BE019CB40E953B6E26F0009FA710CF9E9AB8
869B31EC6F8A5E51A4F8277044270D8D52224CBC84E3AE111799F5CAC2A6E81D1503C42D4AEFD5DA091D16E93E89F7198125CCF450BB50FD80BAA5F7EEC989FBFF52E06030C0100CA5AF9777F249BD4B9EB2A31443E2D0A5C207FFD5C22C35FA39660951
C217D3188400A512CF954ACB517A40DB0B03F5700595BFDA9588DF0747C10130BC8366519C226464F1F28B4250EB1243FAC3FCC50D4D848CBC010D1698AB368D5C0700841E6402E1CB94324936251EC9B0ADE9162AAEEB47A1A4A4D507C01A38E5A06ED9
2E5510DAEF07BF6A5CB488E78CDF1743B9DC41081887091E279AE8BA885FFAE95A8F945DA1CF886711A44F56C157F7AE12260AE6B8AB205F4C853C5DA4740993A98DCCF725C5F2B6F3D36D10EA4E25CAF0E6D0C538CA1ABCD24CB7E57517F4EB661B3C80
86C4EE60278671ECA4AD97CFD8D0B51D39231E0615DC1D37CBF2473F76A7C77A9F7814D1ACC3B327957FCF6AD12C1CD45D2D87873D0649CBC055AA1E3599F22928A0DA867F6AA0AC8ECF32A0183BB3AB8F342104D25ECA2EE0965453D8160437A9DB1AC9
3905DBF1351ABD2501AF4456CE3635D3DF19AFAC016DC601C25F96D08161B05A6A4682C1315DBA653165FB8F48EBFF45B3C09E7F3E53D8E019E937572D377939CEB3F974A8B2455B3A4F7CBED6EAD7355DDCBF8DF11B47C95B2F9E5177D6042BFD501F2B
367E4ACC44895476417C0806F28852153355F398DBD801D319B328C5371C2CEAB0CEA66DCDB32FFEE4F974650A21192EAECD7F0F1FDC5392A289769A42A0F489C88247DF9E721D1DD86D1D6E64554526E107207EC7E2126CEA30E10BA08CBE45CED521C6
02A6B8A6D1E17224E242BA074C828DC015B64C9E0343E71242DF7541D8763F4CAF417B65F020C95110E15176921D931A6FD4F492C31BAC0C2E5C020556AC3A6449207CD45B116F25EA8F0D6492BDD040C7EE661F4C780B05931267234B6AEB400CBA993E
22F2A8E9F36316A5AA245499E1A600CD7AD76027157BB6B5F5819D4F1C15BA6BB417770DE19D1FA0F2473B859F2D9C4E4137C06EF295C0C245716CFF9B6478DD9A6B7B63974DABCE580E50DA187059C6FB37121A89BA3601B0A539980A5983B92315B690
2AD970519E51302E99F2977940E8E1876878F833D31729A73C996B9C73384677FA161713BF3F933A186BF21229CBFE67AE8E7FC46DC53708EF7FBA1125EBF741E08A164B658E7FDE72FB7A2C0BC41EBFCE3F8C737E9D2C11D52F42C8D8373C9E42BA828B
59A9D5048234379D2F9F4D52C7F97EA24BEC69AAB67CE9A95357095C00E78682F4635298592FCBDD61024C4742204AF01774E08F76DF4AF4969184BCBA1771F50BEEAFF3C4BD321F15A45B99B7C58439A9AA8F5250DC714A5BBDAF58531D0C3D1C49CE6D
8CCCF5AEFD533AB0C118697AF6805D25A0332956B2CB0F3A4D4AD1CEF4C167AC793B282C8DB77DBC8889B3AA0A06210EE4D3B50E98ADE254D676B9F3E1269E9820F829AF632BE13D1B338F026E37F04476A2BFA0D122857B06145CEA184567B17B7A729C
13FC49B3661768F69C98D65747562CAC36B11815F31AC18BFC487EFB732CE0CEB1A621DFEFC4DD0322044FEEC614C05E1893D9AEDB091A4C87D9BA1EA03FF80DD5D4DE009C5372968D3F97641B8928D91F735543FA2879FD64697FE5F7392396227B510B
570449D8ADFFA537402A17B4BBA5E9DBA26C6D2BF9EAA00762F1D1F67442A9F353A98D263DADA94328937DA8707B6A7038117226EC299FA1E16520ADECAB2C0F87B6682276861A06F69D684234F4DB0D6F2CD3449F729F9DE8527807FA93B88840E45DA7
61EBE5570EF4FD4E9B60A85D1AF1CD7D068868D6C495353352BEEE276CDE4BDB602A59AC5E090EB70173DE85D8DD1E207996E3A45B05F0CA88A925F66C263861D03589BA317D35DB6059ADAD98F6EB02A2D3F7E2BE0AF0A40C2B873E917605036EE5277A
42A4750E47E0BD247829F7D07C1493633D267785452D33D9583B84225B32F325B4FB6A781837C673E88CAC7DC6E54E8CD9FDCC140B5B5C50E35DBDC0C34609873B570873AAABBF47D796DA7E4B825EBF86C913940C08C58EEB8F7CF433DB708E7009BB59
F6342E9064BF265C3A4DCF40F2BB8FC91E12B7A60F1B7F351D88E5B113BF04C096661222337CC887A1F14C7544AA56AC126764180A5BC06D0DD23AAB5FC78A679DE82EF71C63FAB15CFB500EE9C62A58327A295D4800512DEC8CE4535374110B90100921
76C90F3F2B2BEA2A16550242348ABD82F423BB420C078AA34081D427DD59760CB74789763CA1374E153A491416D425CAE6F9ECC2FAE066748CBCAF665CE86A1E5AD22B8D1E657E32A38BD467E78542B385D2ACAE4E31E08D2BE8167256E9EBACF0E76065
4E96B0207044BD25577D1E2AC1135EB42373CB309332FEFFD22EB4949EABD3B357F8471F4012DA040C1438AB9E7251725CD679DE60B83430F560110276521FA7319773A83567122381AF4396F4B4A403AD1A9923FCCE6D07E45662E7DAA9AC3F7EA035DA
16282542C0202764659E65801C26A6FC4803CC6CD49BB9C0868E960EBDDDB350DFD32EAB88BC05D8542540DFEFFF5733AD65608A05D1B424DBBDBEC548CCEA37C578BCE742293B810CEB853E01C81D838D8587656ED8EFB39CF999BD332C02A384ABAFE1
7300F54451DE7F66A67A8D8D92C93AD1092255448DF7666049EAA9B26DD3ECFE29E8632150A3AA46D6F9994DBFD978E9101C7F4014ED0CE53B0D8252E9FBE0EC81E1F5DCE22A5254705169FD12722851606C7F8A4CB593076B0D2750C7C2E5E0054A752F
4DA6FE17DC92F22FFABF9C81A08865300A91021F010484DEF2431EFE8CA009D62708541EB796A03227F46F32480D490C80BF7011C94EF178549C557359EAA562E7E5F017460DF357D4E3F9830786334CFDFB526A8191209A9446B78DED21FB1D2FD1D152
6707234BD671E8C5A04E7161E8D946D089DCC2676BA948D0311E55FBA2CBCA885FEF8B54AF717DB74C92FEE6B2E534848FE944B18B028CC01C6F4F215C5DD45B7506AC7AC9D2B95145FF4B4C54D0AA936F99D43FB240CAFF464821AC3188F3362089EDF3
E50E50394A52610560F4AFF5F78BA860BF3D9FABF93CE800654478A4A7AC9138260616AA6240BE2B0D95A8E7077A86693FAD9E0BB854B1C4C44B2816CB4EFA24558A2416E6DA3913425DEC68343899B95F3635A00CC0CDC1588AB472DE06EA01F96CF5A9
3EA3C013D000E37849752F5BF941513429AB89486328D772629A58DD4131353EEE413307B94A6775DE370CFAD39880295641C8252D71C52F734A808D45881B2D36834E81087B0AD91AC61E1C221750DAC91113FD89A586E5B0C8699DD129FFA234A17D6D
B22E63C26009D07D9104693FED6A95778C6186CAAFBF272BFEC870561F2F2EA88035ADA5CDC59313A0DC157250BABCAF0BB6342674EA6D6C9CF104F638CF45F78C5340AE8A80CF881D69C4A938D6143197BB0E4106321F6036CEA8A07D6877CF7D6F2B9F
1B7D66F94D06199CC1B2964C30DEA4AB7A6B55FD750823B139BEA91C9F05C7134392A6AECC06964C6C04AB78D7935CBED5922D448CBA64264882B3E1DC6E033DC12C98B62587CFA0AD801A05A3943311E1F53A602F88F8CF585783AF10A30928E71EEFA3
C11D29BBC244BB17F26D723FF45B8B429D00C28A63DCD1CB2860914CE41F8C7708F3F73BAA405DD9AB8D0D640E7FF288D39708A167B288BDF96829C209C05BD9C4D2ACC244EBEA0537972186500F3E88570A70BA49DF86373082FE1346825C1A9065C117
12466E3EBD910A4907DCD3ACA7CEB568F1EE7F33C1AFBFECCBFF0A853442582AA30F4CC8EDF1383CA7B0713FB156761E69C21402CA277B8E8F635410097B6554BB949488493AE9EC10ACB6488A5774EA7BC3C892DD77B3F42232AF78A731CD8D8220E588
5568198226EF6ABBB168D21AF42312A37F4D05B0B4BC67EA834116BFB91EDE13EB7D37DD1D95448207637D3FE91B4B6B3D7EAC3063F2AE54BBAA2B538C117C9F02DA0648EE21AF8FE0367A8362BCD73D4211DB5E073E2884260632D6604E73CFAD25183C
D29E4150DE6D6743010126D822FEDEDD5626BB44EAA885493DA8D81257BDE018A0A9044DB08483D64D7482C1C1CF987414DBE8B0255EAA260C4B09365A0D82D9FF01DDD48D2BA3C4155F154E52AC45462428B6F46CC026D4F49BB4BBB84074BD1B0ECA00
58DD6A8C327B56D5DA3AEF02E8B015CAA1F7C339DE8A81C7A4490F125DF0E53CD3A8424D05FC22F50DDEEB2F19057EE22CB35E8B4F5E1D69EC5513855FC4372990BAEF642105D4DE39017C2CC4D0A849099AE95288881254521459571F19593D8BB774FA
5A97F38D8F684F913CD0D9569D800529EA3C3EA2F86EE68328B36775F16FD150AF35BD7A341FFE9AB91C6F6F5BAFA5B75FDF94035C02D7FFC7838587CD0AB90DFAF5DF5EDBF5A821120B201918343F2C52EA0F2E80F59C864F02ED50170884B60C59D0A4
C313D8D4E77D13AF967AFE5C4BD2F4FAED58D4D98B5069F5C13FA2D53EDFA08B01B192959EEC1B838CB3EC66C17B336227AEF2177357AB5061D6B8F1E6724A730E839C29067D8213EBFCF53A01EDD607B270AF4B6D47BF06AC31C86906D4482E426A565E
D64BD91D46630115A6F8B2C64080FB58F44BC01BF54704E05DEA9D3686F314EB31CEFC255EF046E2A261DD266ADC662C1D14744D754663CB1C47B45DA52A8FE1FE19192827A317B8F171C8412A8CEBFCA4F23B5A5077EFB9AB9665B1306731D2ECC59694
30314DB89602ECD99B0FF9322988FE6C99505A397938EC7B227DDA17FF469C5D8CF7C1DDC9639D31DE0EA288A128CF8FC4DB9A0CA1A7958E6F24AB56438E21E19DEDA34D0055E84C60777D4318B6C563870CFF1FC691AA3608794005CE88145BB1226681
5F16A1FD972190616BAEB61BC87EC09231675AF7E17DA51150F4070E4C4B83E7E5BF7A720761CEF2D1C072495F6180AF9DDD6E45A503DAD8F1B5DBC4D32E5369805334C422D40070853B18CE662D3FC9B7353E0ECA793706C92290FC3B05DDEADE9EEE1A
134947162A5F41DC8D8E628A6E362168FEAF475CE6925DE08B7D0D69AA6E397507BCA0C731F4DA44DED7926C5107044802F15DC47D677FBD2D8044B6CDBE56F9C6160559B6758B7508D71ECD16FFB0E1572444318156BE81AD63372E789E823C25645E09
455A97BC0631E483D841A17A26974744B00ED6AF18E4D728F243E7F90DF52AD90CB588AB14997D22BC5FF74B84431834A2BA32009B712463F40F97017BC054C54D0CA67F656785BC50B73DB904BD2BD7F3A0A4E6B596ADECA244E5FE9022030BDE1AC0F8
328A09A44DF1CCBE271E1C5C1119DF766C341B56ABDE66E16FB0E1B4D5A3D850D6BE77BB7E31A48D4634CCD39CA10D2AA338F38F6F5FCB8FD6557F9E82912F20D4632253606C9CBD5B58588D79F8C8576F858A94D51AF03383EA84F6EEC16B98AED1615C
B1E3E8B11028C979D3CD97593B292473D35C7232BC5F4B965972F037F0467FC469F7F5D2CA571C2A4D08C69D61F85C17FA422AD24BE390D8C60DDA0E2F64D667A56AB5282F2A0FEED6A20CF58AD7511F97BF832B1B4BF830B88D6F8CBF365ED11A528753
73224640E00E4D29F7CE1A12E9445E3BEECEA9EB207ABCC19D5A5F54E0401401400A55E836146D1FC716F535AF67CF63F7228BFE7797A383B3A3E80F3F88A0567E019F036FBFAB703AB8ADD1929668E6AE44799D34FA8E5F949A124A0F9D994872C2E8A3
92DCEFF9B0223F9F11E1603F6A4782D86D0D93EB35A40932A4B6018F6B2764C509362C8D245A685A01F038F8873A110C511A118E7F156394EBF1E9769ABA0899FED6514DF70C26B03BCF0579836A4B11114746B9CBAF08E726DCB7B4D4DD6737B15377F8
BE2B07F0FE7C2ACCE467C7A459666303DDBB3269A09CF0BC22B687C4A5C839881369793B3A8BB26ADCD4AA8D17A77949FCA53CE2CE0A6A7F04601BE30AC7BDE1A4D570B0F1037A3A7E4E6D0077965157CBBC704188E3B883D86ADE66AE9D0E96C9FC1F31
E6D34EA9A0BC73EBC023F6A3AC9CDB602C1FAF23BB91F6609BD341EFFAC537F473A658EACE4F50C380FFBA6497BBD7C26BB9EE3F099B874F18616A5BC488C54821805FAC35EC0BCF494571BF3FF1BE2F8C0657C383EBCF1B966EF742AE4D21F130ACDE91
0FD7F5B55AB964817C1714B9E665E7F9C868FF921E3CD1B881750A41C7B37A7357C326ABB7CBF5EC9CEC91B940A7010A6C4D8E04B70F60BEB295DF8C5A132402A14C3B7A272BEFDC7F8069DE9311ECE8C3EC8490C7242D04F6475D1F0381CFF9B74C6D77
A2668FE383D0C9581D8DF4647A3E7FEEEE9F576B09B8FEAC62B17822065C667DBB2500CFB7D7AFADB5DA629EBFF931998D2FB8C3F6ED05D8E1FFAF83634492D5814DE8993D6EC780EC73EE2671D706A13ECD68B65A6F0FF9917AAEA26D73FA8D978B7CE4
D614DDD479CF01CD34A84E7E34AEE77E4FFE8EC5D87C8966CA02D8DDA61E27D71E23CC8469652FE61FAA62C4A8A3CAAFD573E941779E5753D61795548A54E749646CA867C7CFBB568EB2F18D55F368FFA230DB0E6289A21A510BA3572D83529A175F6D87
19B411C6945C34175777CA5B6892B0489EAABAFFEBEC14CD406C4B1A106CA232EE053100F40E90FD390D7230469370D7A29C919F414CF62B3D564D6AC6651AAC2C572149C29CDEB40E1AB49E9E9CF1EAED43D0866BB320D4BB0BBF8640DAFFE95B731F8C
3DC62EB8FF9624E5D5D5FEA3C22FF5387BF1CE30BC314428B8D155C2AB3F9C09A24A6B18422DEB25076F58DB16FA2BC430D3B62C1E734BB02F5AE423DA6C4A7327DBA8AB4ECFD7786703F3E6030E9C262763B1232C1389D5DF902E815A482AC34E05E5AB
59686EDF2631822397DC662AE374CA00967D202E6A5341E89A64B83D318AE1AF234671B513573CBB05EABE8DE713E25DB478B7A04D02A2F1C858E04705F2AA9B1BB35579AE7C46DB39CD8E0A38188302E315FC7AC4611B631274021880E86486E40B6CC4
7DE4A21C4D16D45A79D69BC9200745414BA6C1EBB570685F1E75D13680C0985281C01E260EC0B1C3AA78E47256F097C29ECDC9FCDC790020C5F11394EC3EA4097502006FA0E57D9AC703A3B81CA21A7014409B959F123166CB110297BB9683FD2A1E1102
73C9E94D7ED1E67F8925FDDDB6A4D96C17AC4964633F1C932C29BC744BC48C78276B97E06106BB9D7B4B8C213190CCEBA32C2457FE1B1F7F37E8C540C3B83965319B69DF36C667176AB690530E2B639A4685D218579CE6581F113F8BF39B18C43CAD4698
CE38B438D2009ED0C86A33142013774C95667A2BA8D0B00A6AF85E50C3048815DEF7D2C760BDE028AC548C6628736104FFE991112C2CCDE085103AF5554995FA7812E50BC5AD942245413912635152F0FAF794736AE47190BFBFEFF17E274FE790878852
CD3E74AA94089952F997F2BD0697EF2FD6A067D307751AEE556FBC64F21A77B3CE2CF564BCC382E79EB58F91EAA4AD898DEA91D16BDDC5A5A7F30BB18FD0D7F4D56E2D4C81C4A36A44979AE097AFE996B96474C47AF1E32EA03D33C48691631B449AE0CD
3E5E7CB8846B88D8CBC35A3F32D33871EAC12025D136B9090A69ED55A9BE09D75C84EB4DC04B7A592C84265F112CA6D4C214E62A17438DEA41CA911D227DAE9074EA3FC72634BB139C727DBA312643D6139B6B5EEA345F194011C736AD2B57D43EDF9940
756C114FA38B00E42829F41C61F10EE7A583C60B0DD0EB6CED9B3A313D95BE3E501851A64C124ED69819BCDB3D777659BF99EC8422C2BA64AA2F823C94D54F69D1CEA47D90EF21A428C3B34E7D3D5BF9C0E143DBA3ABCFB269A99C0921E735FE8C57F00F
986864DE930B196B7863EAAE2B5D6BE3E676839CDFA6557D09A15EE85CE5F44DB891F2BD8FEAD3744951375180AC439C07581CC81EFF3C809E97F01AC1CFE9789DB7E6AAFC0FCB84B5FB95AB82EFD563CAF2E07A808E3AE5AC34B95994305ABFD958DCFC
3A40D5500B65FBC2AE91864B9BB8E49CF5FBC133AEC8D0D398B89F04647F41273EC611528C0882EA432FB753BC2B34430B9DAEBD1B72E60C12D08914A960A734B5B8B87B5BCF90D9224A81E247B238991914936E84AF95F5AE720B7BB86AFF4A4B2EA496
5496B2234ADD9E262BC3E3FD0F8497109B6740A291519203E023668D1F91CA153AF90F165FDD6A3B4C2BCE1CA8F40AB2C3A616F37C92AE93700CFAA0DBCB920016B89F21F95E29F8AEF878E88FD5BA92A2F634E5AE7726AE5E0227D94A172A6F6FAEE6A5
F2E9336A1352FFD87C9F2D6D9D915DAF57FADA035F467E189533DAED16535C578389F161F76D96553669639FAA4D8EA73E8DF1665A22E64E9CF5C8E51202AB831EC8769149A502880770C83DFBEB5A357BE3B882C55141843A27E0DDC29BEC545A323DC5
F6996EA0966B14EE9437F98213A3EBC6A85798C9FE2FA2EBDCDF33A98449BCDBEE72657FF2D48AE33DD0BE2D3F3FCDE979EE2726AE9B3E4D7E9121B1F44067D1A62B95222177CE16EA869AA93D1160923CAAF68C82CBC1C95ADDBFDF948189B6031F5C15
CC1C7F06F57BA6D34F37B03184A2EEC273D0D444E9BF5A0F0251EF55D1DC594C864BC8EA4ACAC3D4B44E3842781B362AAD50469A5C4DF83157DCE2FEDD72E15BE468A657B52E68E6AC5D09659A1B7673CC676E09E2E593D2775C46E04773DF911CDE47B5
31FA516D5C670874CAE0A37A0C885E9A5DAD79092F92AE77BB6E4189453EC2B8A18AEA0FF96B712E76CCEDFB1416B7FD38251F936276CD2B74418BD49F8E72DEE475929B2A78265A37A03C8B367020A846FA129C6C27845CF26BEF1DBBE062E8682304F7
DF810C58013174B07E8DA131E39AA103A4FF11476DE07B689A3754A4EF2EBBC614BAF0B628476EEF06C235124B9C830675717F89077C1F52271BA2ACD3ED55239806F5402223599337CB17D7A009AFD5A05C1C22B0246AF7E805541921A0296C50278CA5
6705C77E9B90D03CD26ADDF3B4F51D7C9F9C9B6963F27783FBD98761DBCC23DE76C90B54FD338B1FE611C854A1565CB0B93797DF835E87D77C8E42D1548417FEA84283F18B894FB98E347C311AE701CF8328E930EF59F04094B7EF5B3B0025F3148E618A
8ED6F69552123C2984BA300D5B33BD6A85259E26B861988403BA8FB6