//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES
#define SyncTimeDate 60sec
//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "_SyncTimePLC"
	Revision           = "2.0"
	GUID               = "{A222D90B-6D54-49EE-9B79-BFA1E650F083}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	DefCyclictime      = "60000 ms"
	BackgroundTask     = "true"
	DefBackground      = "30000 ms"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(510,360)"
	Comment            = "Writes the source server date &amp; time after input to destination clients date &amp; time.&#13;&#10;&#13;&#10;If source clients are connected:&#13;&#10;--&gt; writes every minute the source clients date &amp; time to the destination clients date &amp; time.&#13;&#10;(the values will be fixed by the background time)&#13;&#10;&#13;&#10;&#13;&#10;">
	<Channels>
		<Server Name="ClassSvr" GUID="{5D6501C0-FEF0-4ABE-9BDA-783C4E9A9517}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="class server"/>
		<Server Name="SyncDate" GUID="{2AF2D155-09B5-4068-B68C-C099CF73156D}" Visualized="false" Remotely="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="source date (for input)"/>
		<Server Name="SyncTime" GUID="{F191E791-F1DE-4A48-8893-FE7C6584A1E9}" Visualized="false" Remotely="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="source time (for input)"/>
		<Client Name="cOnline" Required="true" Internal="false" Comment="data channel to _MMStateSvr for reading the multimaster online status"/>
		<Client Name="cSetDate" Required="true" Internal="false" Comment="destination date"/>
		<Client Name="cSetTime" Required="true" Internal="false" Comment="destination time"/>
		<Client Name="cSyncDate" Required="false" Internal="false" Comment="source date "/>
		<Client Name="cSyncTime" Required="false" Internal="false" Comment="source time"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\_SyncTimePLC\_SyncTimePLC_en.pdf"/>
			<File Path=".\Class\_SyncTimePLC\_SyncTimePLC_de.pdf"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="Sigmatek"/>
		<Dokumentation Revision="2.0" Date="2018-02-06" Author="KaiAnd" Company="Sigmatek" Description="Implemented functionality to take over date &amp; time of inputs on server vars&#13;&#10;--&gt; new source server for date &amp; time inputs&#13;&#10;--&gt; &quot;Requierd&quot; of source clients is &quot;false&quot; now&#13;&#10;--&gt; old cyclic functionality only works if source clients are connected"/>
		<Dokumentation Revision="1.3" Date="2016-11-10" Author="KaiAnd" Company="Sigmatek" Description="changed type of client &quot;cOnline&quot; from &quot;_MMState&quot; to &quot;_SIG_LSL_CMultimasterState::_MMStateSvr&quot;&#13;&#10;(necessary because of changed type after action &quot;PROJECT -&gt; Multimaster -&gt; Create/Update State Class&quot;) "/>
		<Dokumentation Revision="1.2" Date="2016-10-10" Author="HubChr" Company="Sigmatek" Description="Added documentation pdfs."/>
		<Dokumentation Revision="1.1" Date="2016-09-07" Author="HubChr" Company="Sigmatek" Description="Translated comments to english"/>
		<Dokumentation Revision="1.0" Date="2015-11-11" Author="hötant" Company="Sigmatek" Description="creation of class"/>
	</RevDoku>
</Class>
*)
_SyncTimePLC : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	SyncDate 	: SvrCh_HDINT;
	SyncTime 	: SvrCh_HDINT;
  //Clients:
	cOnline 	: CltCh__MMStateSvr_PTofCls__SIG_LSL_CMultimasterState;
	cSyncDate 	: CltCh_HDINT;
	cSyncTime 	: CltCh_HDINT;
	cSetDate 	: CltCh_HDINT;
	cSetTime 	: CltCh_HDINT;
  //Variables:
		TimeStamp 	: UDINT;
		IsCon_cSyncDate 	: DINT;			//! <Variable Comment="&quot;Is Connected&quot; flag ..." Name="IsCon_cSyncDate"/>
		IsCon_cSyncTime 	: DINT;			//! <Variable Comment="&quot;Is Connected&quot; flag ..." Name="IsCon_cSyncTime"/>
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL SyncDate::Write
		VAR_INPUT
			input (EAX) 	: HDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: HDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL SyncTime::Write
		VAR_INPUT
			input (EAX) 	: HDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: HDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _SyncTimePLC::@CT_
0$UINT,
2#0100000000000000$UINT, //TY__SYNCTIMEPLC
2$UINT, 0$UINT, (SIZEOF(::_SyncTimePLC))$UINT, 
3$UINT, 5$UINT, 0$UINT, 
TO_UDINT(216306762), "_SyncTimePLC", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::_SyncTimePLC.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::_SyncTimePLC.SyncDate.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2676542335), "SyncDate", 
(::_SyncTimePLC.SyncTime.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1518494784), "SyncTime", 
//Clients:
(::_SyncTimePLC.cOnline.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(931620949), "cOnline", 
(::_SyncTimePLC.cSyncDate.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(4223418234), "cSyncDate", 
(::_SyncTimePLC.cSyncTime.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1052151877), "cSyncTime", 
(::_SyncTimePLC.cSetDate.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(4282654283), "cSetDate", 
(::_SyncTimePLC.cSetTime.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(978235764), "cSetTime", 
END_FUNCTION


#define USER_CNT__SyncTimePLC 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__SyncTimePLC] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _SyncTimePLC::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT__SyncTimePLC, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SyncDate.pMeth			:= StoreMethod( #M_RD_DIRECT(), #SyncDate::Write() );
	IF SyncDate.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SyncTime.pMeth			:= StoreMethod( #M_RD_DIRECT(), #SyncTime::Write() );
	IF SyncTime.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL _SyncTimePLC::Init

  if (_FirstScan) then

    //-------------------------------------------------------------------------
    //  check client-connnections and set flags                         V.2.0
    //-------------------------------------------------------------------------
    IsCon_cSyncDate := FALSE;
    IsCon_cSyncTime := FALSE;
    if (IsClientConnected(#cSyncDate)) then   IsCon_cSyncDate := TRUE; end_if;
    if (IsClientConnected(#cSyncTime)) then   IsCon_cSyncTime := TRUE; end_if;
    //-------------------------------------------------------------------------

  end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SyncTimePLC::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
  

  cOnline := cOnline.Read();
  if ( (cOnline = _SIG_LSL_CMultimasterState::_MMStateSvr::Online) & 
       (IsCon_cSyncDate = True) & (IsCon_cSyncTime = True) ) then     // V.2.0

    case ClassSvr of
    0 : // Read Time from HMI
        cSyncTime := cSyncTime.Read();
        // Set Time of HMI to PLC
        cSetTime := cSyncTime ;
        cSetTime.Write (cSetTime);
        ClassSvr +=1;
        TimeStamp := ops.tAbsolute;
        
    1 : if ((ops.tAbsolute - TimeStamp ) >= 1sec) then
          // Read Date from HMI
          cSyncDate := cSyncDate.Read();
          // Set Date of HMI to PLC
          cSetDate := cSyncDate ;
          cSetDate.Write (cSetDate);
          ClassSvr +=1;
          TimeStamp := ops.tAbsolute;
        end_if;
        
    2 : // Update time cyclically
        if ((ops.tAbsolute - TimeStamp) >= (SyncTimeDate/2)) then
          // Read Time from HMI
          cSyncTime := cSyncTime.Read();
          // Set Time of HMI to PLC
          cSetTime := cSyncTime ;
          cSetTime.Write (cSetTime);
          ClassSvr +=1;
          TimeStamp := ops.tAbsolute;
        end_if;
        
    3 : // Update date cyclically
        if ((ops.tAbsolute - TimeStamp) >= (SyncTimeDate/2)) then
          // Read Date from HMI
          cSyncDate := cSyncDate.Read();
          // Set Date of HMI to PLC
          cSetDate := cSyncDate ;
          cSetDate.Write (cSetDate);
          ClassSvr :=2;
          TimeStamp := ops.tAbsolute;
        end_if;    
        
    end_case;
  else
    ClassSvr :=0;
  end_if;

	state := READY;


END_FUNCTION




FUNCTION VIRTUAL GLOBAL _SyncTimePLC::SyncDate::Write
	VAR_INPUT
		input (EAX) 	: HDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: HDINT;
	END_VAR

	SyncDate := input;
	result := SyncDate;

  // write input date to destination
  cSetDate := SyncDate ;
  cSetDate.Write(cSetDate);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _SyncTimePLC::SyncTime::Write
	VAR_INPUT
		input (EAX) 	: HDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: HDINT;
	END_VAR

	SyncTime := input;
	result := SyncTime;

  // write input time to destination
  cSetTime := SyncTime ;
  cSetTime.Write(cSetTime);

END_FUNCTION
