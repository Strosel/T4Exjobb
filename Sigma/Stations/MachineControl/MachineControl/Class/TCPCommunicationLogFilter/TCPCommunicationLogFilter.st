//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "TCPCommunicationLogFilter"
	Revision           = "1.0"
	GUID               = "{C1E6102D-FD88-45D3-9110-10E4D92E5C32}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(530,120)"
	Comment            = "Derive class and overwrite Method CheckFilter() in order to filter logentries.">
	<Channels>
		<Server Name="ClassSvr" GUID="{398AF89D-3180-445A-B9BD-88E8362E2985}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Derive Class and Connect Server to cLogFilter if logging entries shall be filtered."/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="HötAnt"/>
		<Dokumentation Revision="1.0" Date="2015-02-16" Author="ObeChr" Company="Sigmatek" Description="Prepared class for library."/>
		<Dokumentation Revision="1.0" Date="2014-04-17" Author="HötAnt" Company="Sigmatek" Description="Created class"/>
	</RevDoku>
</Class>
*)
TCPCommunicationLogFilter : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
  //Clients:
  //Variables:
  //Functions:
				//! <Function Comment="Derive class and overwrite this method if you want the log entries to be filtered. Return FALSE if entry should be dropped, otherwise return TRUE." Name="CheckFilter"/>
	FUNCTION VIRTUAL GLOBAL CheckFilter
		VAR_INPUT
			pMNG_LogEntrie 	: ^TCPCommunication::t_s_LogEntry;
		END_VAR
		VAR_OUTPUT
			bAddToLog 	: BOOL;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB TCPCommunicationLogFilter::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_TCPCOMMUNICATIONLOGFILTER
1$UINT, 0$UINT, (SIZEOF(::TCPCommunicationLogFilter))$UINT, 
1$UINT, 0$UINT, 0$UINT, 
TO_UDINT(2005587341), "TCPCommunicationLogFilter", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::TCPCommunicationLogFilter.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
//Clients:
END_FUNCTION


#define USER_CNT_TCPCommunicationLogFilter 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_TCPCommunicationLogFilter] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION TCPCommunicationLogFilter::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_TCPCommunicationLogFilter, pCmd := #vmt.CmdTable);
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #CheckFilter();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
#pragma using TCPCommunication

#pragma warning(disable:73);

FUNCTION VIRTUAL GLOBAL TCPCommunicationLogFilter::CheckFilter
	VAR_INPUT
		pMNG_LogEntrie 	: ^TCPCommunication::t_s_LogEntry;
	END_VAR
	VAR_OUTPUT
		bAddToLog 	: BOOL;
	END_VAR
 
  bAddToLog := TRUE;
  
END_FUNCTION
#pragma warning(default:73);
