//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "UserAlarmGenerator"
	Revision           = "1.1"
	GUID               = "{7EECF76C-8DE9-46C1-9836-45A596A6625E}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(420,240)"
	Comment            = "Class checks status of a Server and initiates a write (to an alarm server) if necessary">
	<Channels>
		<Server Name="ClassSvr" GUID="{87A9AD62-0B54-49DF-8B12-F38300C1ABDE}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="class server"/>
		<Client Name="In_mode" Required="true" Internal="false" Comment="0= create alarm if  In_status is LOW&#13;&#10;1= create alarm if  In_status is HIGH"/>
		<Client Name="In_status" Required="true" Internal="false" Comment="status to be watched for alarming"/>
		<Client Name="Out_alarm" Required="true" Internal="false" Comment="1= ALARM (status is not OK)"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\UserAlarmGenerator\UserAlarmGenerator_de.pdf"/>
			<File Path=".\Class\UserAlarmGenerator\UserAlarmGenerator_en.pdf"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="Sigmatek" Author="KaiAnd"/>
		<Dokumentation Revision="1.1" Date="2016-10-10" Author="HubChr" Company="Sigmatek" Description="Added documentation pdfs."/>
		<Dokumentation Revision="1.0" Date="2016-05-24" Author="KaiAnd" Company="Sigmatek" Description="Creation."/>
	</RevDoku>
</Class>
*)
UserAlarmGenerator : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
  //Clients:
	Out_alarm 	: CltCh_DINT;
	In_status 	: CltCh_DINT;
	In_mode 	: CltCh_DINT;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB UserAlarmGenerator::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_USERALARMGENERATOR
1$UINT, 1$UINT, (SIZEOF(::UserAlarmGenerator))$UINT, 
1$UINT, 3$UINT, 0$UINT, 
TO_UDINT(265160476), "UserAlarmGenerator", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::UserAlarmGenerator.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
//Clients:
(::UserAlarmGenerator.Out_alarm.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2504991020), "Out_alarm", 
(::UserAlarmGenerator.In_status.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1200155466), "In_status", 
(::UserAlarmGenerator.In_mode.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1140173265), "In_mode", 
END_FUNCTION


#define USER_CNT_UserAlarmGenerator 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_UserAlarmGenerator] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION UserAlarmGenerator::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_UserAlarmGenerator, pCmd := #vmt.CmdTable);
	vmt.CmdTable.CyWork		:= #CyWork();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL UserAlarmGenerator::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
  VAR
  	myAlarm : DINT;   // internal alarm
  END_VAR
  
  //----- visualize the clients -----------------
  Out_alarm := Out_alarm.Read();
  In_status := In_status.Read();
  In_mode   := In_mode.Read();
  
  //----- building the internal alarm -----------
  myAlarm := 0;
  if (In_mode = In_status) then
    myAlarm := 1;
  end_if;

  //----- write the output ----------------------
  if (myAlarm <> Out_alarm.Read()) then
      Out_alarm.Write(myAlarm);
  end_if;

	state := READY;

END_FUNCTION
