//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "GetOSVersion"
	Revision           = "1.2"
	GUID               = "{DF250198-6CC3-48AB-B5C7-DF6E7D3935CA}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(510,180)"
	Comment            = "class to read the OS version and write it to a string object ">
	<Channels>
		<Server Name="ClassSvr" GUID="{E321F2F2-C71F-4ADA-8573-1C5C5FC5EF63}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false" Comment="class server"/>
		<Client Name="cAsciiBin" Required="true" Internal="false" Comment="object channel to a ASCII_BIN object &#13;&#10;to convert the os version from Bin to ASCII "/>
		<Client Name="cOSVersion" Required="true" Internal="false" Comment="object channel to a string object &#13;&#10;to write os version on stringram"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\GetOSVersion\GetOSVersion_de.pdf"/>
			<File Path=".\Class\GetOSVersion\GetOSVersion_en.pdf"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="Sigmatek"/>
		<Dokumentation Revision="1.2" Date="2017-08-02" Author="FurLuk" Company="Sigmatek" Description="changed formatting"/>
		<Dokumentation Revision="1.1" Date="2016-10-10" Author="HubChr" Company="Sigmatek" Description="Added documentation pdfs."/>
		<Dokumentation Revision="1.0" Date="2015-09-22" Company="Sigmatek" Description="Creation."/>
	</RevDoku>
</Class>
*)
GetOSVersion : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
  //Clients:
	cOSVersion 	: CltChCmd_String;
	cAsciiBin 	: CltChCmd_ASCII_BIN;
  //Variables:
		String : ARRAY [0..20] OF CHAR;

		Temp : ARRAY [0..20] OF CHAR;

  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION GLOBAL OSVersion;
	
	FUNCTION VIRTUAL GLOBAL ClassSvr::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd ASCII_BIN
#pragma usingLtd String


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB GetOSVersion::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_GETOSVERSION
1$UINT, 2$UINT, (SIZEOF(::GetOSVersion))$UINT, 
1$UINT, 2$UINT, 0$UINT, 
TO_UDINT(4017734107), "GetOSVersion", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::GetOSVersion.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
//Clients:
(::GetOSVersion.cOSVersion.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1370496641), "cOSVersion", TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 
(::GetOSVersion.cAsciiBin.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(267292173), "cAsciiBin", TO_UDINT(2897291062), "ASCII_BIN", 1$UINT, 20$UINT, 
END_FUNCTION


#define USER_CNT_GetOSVersion 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_GetOSVersion] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION GetOSVersion::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_GetOSVersion, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Write		:= #Write();
	vmt.CmdTable.Init		:= #Init();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL GetOSVersion::Init

  if _firstscan then
    OSVersion();  
  end_if;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL GetOSVersion::ClassSvr::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	ClassSvr := input;  
  OSVersion();
 	result := ClassSvr;

END_FUNCTION


FUNCTION GLOBAL GetOSVersion::OSVersion

  if (_rtosversion AND 16#F000) <> 0 then

    cAsciiBin.Bin2Ascii(#String$CHAR, ((_rtosversion AND 16#F000) SHR 12)$DINT, 16#0102);
    
    cAsciiBin.Bin2Ascii(#Temp$CHAR, ((_rtosversion AND 16#0F00) SHR 8)$DINT, 16#0222);	
    _strcat(#String$CHAR, #Temp$CHAR);	
   
    cAsciiBin.Bin2Ascii(#Temp$CHAR, (_rtosversion AND 16#FF)$DINT,16#0033);	
    _strcat(#String$CHAR, #Temp$CHAR);

   // write os version on stringram
   cOSVersion.WriteDataOff(21,0,#String$USINT);
   
  end_if;

END_FUNCTION
