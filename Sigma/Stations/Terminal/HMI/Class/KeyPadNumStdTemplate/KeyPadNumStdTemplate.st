//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES


#define KEYPAD_NUM_BUTTON_WIDTH       80
#define KEYPAD_NUM_BUTTON_HEIGHT      80

#define KEYPAD_NUM_BUTTON_XOFF        5
#define KEYPAD_NUM_BUTTON_YOFF        105


#define KEYPAD_NUM_WIDTH              330
#define KEYPAD_NUM_HEIGHT             435


#define KEYPAD_NUM_INPUT_XOFF         5
#define KEYPAD_NUM_INPUT_YOFF         45
#define KEYPAD_NUM_INPUT_HEIGHT       30

#define KEYPAD_NUM_TITLE_XOFF         7
#define KEYPAD_NUM_TITLE_YOFF         5
#define KEYPAD_NUM_TITLE_HEIGHT       30


#define KEYPAD_NUM_LIMIT_XOFF         5
#define KEYPAD_NUM_LIMIT_YOFF         80
#define KEYPAD_NUM_LIMIT_WIDTH        80
#define KEYPAD_NUM_LIMIT_HEIGTH       20

#define KEYPAD_NUM_UNIT_WIDTH         70
#define KEYPAD_NUM_UNIT_HEIGTH        20

#define KEYPAD_NUM_ESC_WIDTH          30
//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "KeyPadNumStdTemplate"
	Revision           = "1.0"
	GUID               = "{41760293-5BB3-49DF-A348-439291B77F54}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\KeyPadNum\KeyPad.ico"
	SharedCommandTable = "true"
	Objectsize         = "(540,240)"
	Comment            = "class is used to get defaultimplementation of numeric keyboard.&#13;&#10;set client &quot;Ima&quot; to IMA_WINDOW&#13;&#10;set client &quot;No&quot; to _WIN_EDITOR_NUMERIC">
	<Channels>
		<Client Name="KeyPadImg" Required="true" Internal="true"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="Matthias Schuiki"/>
		<Dokumentation Revision="1.0" Date="2016-04-18" Author="Matthias Schuiki" Company="Sigmatek" Description="release"/>
	</RevDoku>
	<Network Name="KeyPadNumStdTemplate">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{7362EE10-88F4-489D-8D03-7DDDA495BA07}"
				Class      = "_Screen"
				Position   = "(218,120)"
				Visualized = "true">
				<Channels>
					<Server Name="Screen"/>
					<Client Name="ImA" Value="IMA_WINDOW"/>
					<Client Name="Lse"/>
					<Client Name="No" Value="_WIN_EDITOR_NUMERIC"/>
				</Channels>
			</Object>
			<Object
				Name       = "KeyPadImg"
				GUID       = "{4EB7A5A3-6440-40D2-A85B-635738D0ADB7}"
				Class      = "KeyPadImagesStdTemplate"
				Position   = "(210,390)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Screen" Destination="_base.Screen" Vertices="(690,210),(518,210),"/>
			<Connection Source="_base.Lse" Destination="this.Lse" Vertices="(218,210),(38,210),"/>
			<Connection Source="_base.No" Destination="this.No" Vertices="(218,270),(38,270),"/>
			<Connection Source="_base.ImA" Destination="this.ImA" Vertices="(218,330),(38,330),"/>
			<Connection Source="this.KeyPadImg" Destination="KeyPadImg.ClassSvr"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using _Screen

KeyPadNumStdTemplate : CLASS
: _Screen
  //Servers:
  //Clients:
	KeyPadImg 	: CltChCmd_KeyPadImagesStdTemplate;
  //Variables:
		DoneByProgram 	: BOOL;
		KeyButton_Width 	: INT;
		KeyButton_Height 	: INT;
		KeyPad_Width 	: INT;
		KeyPad_Height 	: INT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL S_Start
		VAR_INPUT
			pic 	: ^void;
			firsttime 	: BOOL;
		END_VAR;
				//! <Function Comment="method is used to create screen/window by program (without lse)" Name="S_CreateNew"/>
	FUNCTION VIRTUAL GLOBAL S_CreateNew
		VAR_INPUT
			psetup 	: ^_NEWSCREENPROP;
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
	
	FUNCTION TAB KeyTab_123;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using KeyPadImagesStdTemplate


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB KeyPadNumStdTemplate::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_KEYPADNUMSTDTEMPLATE
1$UINT, 0$UINT, (SIZEOF(::KeyPadNumStdTemplate))$UINT, 
0$UINT, 1$UINT, 0$UINT, 
TO_UDINT(1267823535), "KeyPadNumStdTemplate", //Class
TO_UDINT(3599188277), "_Screen", 0$UINT, 3$UINT, //Baseclass
//Servers:
//Clients:
(::KeyPadNumStdTemplate.KeyPadImg.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3266383049), "KeyPadImg", TO_UDINT(980817768), "KeyPadImagesStdTemplate", 2$UINT, 0$UINT, 
END_FUNCTION


#define USER_CNT_KeyPadNumStdTemplate 6

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_KeyPadNumStdTemplate] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION KeyPadNumStdTemplate::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= _Screen::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _Screen::Screen.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _Screen::Screen.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_KeyPadNumStdTemplate;
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #S_Start();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[4]		:= #S_CreateNew();

#pragma warning (default : 74)
	_Screen::Screen.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _Screen::Screen.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION TAB KeyPadNumStdTemplate::KeyTab_123

  '7',0,'8',0,'9',0,
  '4',0,'5',0,'6',0,
  '1',0,'2',0,'3',0,
  '.',0,'0',0,'-',0,

END_FUNCTION

FUNCTION VIRTUAL GLOBAL KeyPadNumStdTemplate::S_CreateNew
VAR_INPUT
  psetup 	  : ^_NEWSCREENPROP;
END_VAR
VAR_OUTPUT
  retcode 	: BOOL;
END_VAR
VAR
  room      : _ROOM;
  pdkp      : ^_DEFKEYPAD;
END_VAR

  retcode       := true;
  DoneByProgram := true;

  MyGetScreenSize(#room);

  KeyButton_Height := ((room.xy2.y - room.xy1.y + 1) - KEYPAD_NUM_BUTTON_YOFF - KEYPAD_NUM_BUTTON_XOFF) / 4;
  if (KeyButton_Height > KEYPAD_NUM_BUTTON_HEIGHT) then
    KeyButton_Height := KEYPAD_NUM_BUTTON_HEIGHT;
  end_if;
  KeyButton_Width := KeyButton_Height;

  KeyPad_Width  := (4 * KeyButton_Width) + (2 * KEYPAD_NUM_BUTTON_XOFF);
  KeyPad_Height := (4 * KeyButton_Height) + KEYPAD_NUM_BUTTON_YOFF + KEYPAD_NUM_BUTTON_XOFF;


  pdkp := Get_DEFKEYPAD();

  psetup^.Position.xy1.x     := (room.xy2.x - room.xy1.x + 1 - KeyPad_Width) / 2;
  psetup^.Position.xy1.y     := (room.xy2.y - room.xy1.y + 1 - KeyPad_Height) / 2;
  psetup^.Position.xy2.x     := psetup^.Position.xy1.x + KeyPad_Width - 1;
  psetup^.Position.xy2.y     := psetup^.Position.xy1.y + KeyPad_Height - 1;
  psetup^.FrameId            := pdkp^.WindowFrame;
  psetup^.TouchEditorAscii   := false;
  psetup^.TouchEditorNumeric := false;
  psetup^.ColorBack          := pdkp^.WindowColorBack;
  psetup^.ColorHatch         := pdkp^.TitleBarColor;
  psetup^.DrawShadow         := false;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL KeyPadNumStdTemplate::S_Start
VAR_INPUT
  pic 	          : ^void;
  firsttime 	    : BOOL;
END_VAR
VAR
  style           : _STYLESHEET;
  room            : _ROOM;
  ptab            : ^usint;
  any             : _ANYPARA;
  pdkp            : ^_DEFKEYPAD;
  ImgNo           : UDINT;
  pButton         : ^_BUTTON;
  bRet            : BOOL;
  uiLine          : INT;
  uiColumn        : INT;
  UnitWidth       : INT;
  LimitWidth      : INT;
  LimitUnitWidth  : INT;
END_VAR

  if ((DoneByProgram = true) & (firsttime = true)) then

    pdkp := Get_DEFKEYPAD();

    init_STYLESHEET(#style);
    setup_STYLESHEET(#style, #pdkp^.StandardFontSchemeName[0], pdkp^.ButtonFrame, T_CENTERBOUND or T_MIDBOUND, pdkp^.ButtonColorReleased, pdkp^.ButtonColorText, pdkp^.ButtonColorPressed, WHITE, DARKGRAY, NIL, NIL, NIL, NIL, NIL);

    ptab := #KeyTab_123()$^usint + 4;

    for uiLine := 0 to 3 do
      for uiColumn := 0 to 2 do
        room.xy1.x := KEYPAD_NUM_BUTTON_XOFF + uiColumn * KeyButton_Width;
        room.xy1.y := KEYPAD_NUM_BUTTON_YOFF + uiLine * KeyButton_Height;
        room.xy2.x := room.xy1.x + (KeyButton_Width-1);
        room.xy2.y := room.xy1.y + (KeyButton_Height-1);
        add_key(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, ptab, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, ptab^, ptab^);
        ptab += 2;
      end_for;
    end_for;



    // ----------------------------------------------------------------------------------------------------------------------------------------------------
    // - KEY BACKSPACE
    // ----------------------------------------------------------------------------------------------------------------------------------------------------    
    ImgNo := KeyPadImg.GetImage(7);
    room.xy1.x := KEYPAD_NUM_BUTTON_XOFF + 3 * KeyButton_Width;
    room.xy1.y := KEYPAD_NUM_BUTTON_YOFF;
    room.xy2.x := room.xy1.x + (KeyButton_Width-1);
    room.xy2.y := room.xy1.y + (KeyButton_Height-1);
    bRet := add_key(pic$^_MY_PICTURE, #style, #room, ImgNo, NIL, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, _BCKSPC, _BCKSPC);
    if (bRet = true) then
      pButton := pic^$_MY_PICTURE.Ptr^$_PICTURE.mask.membutton.ptr + (pic^$_MY_PICTURE.Ptr^$_PICTURE.mask.membutton.no-1) * sizeof(_BUTTON);

      ImgNo  := KeyPadImg.GetImage(8);

      pButton^.buttonimages.image_press     := ImgNo$UINT;
      pButton^.buttonimages.image_in_press  := ImgNo$UINT;
      pButton^.buttonimages.image_sel_press := ImgNo$UINT;
    end_if;



    // ----------------------------------------------------------------------------------------------------------------------------------------------------
    // - KEY INC
    // ----------------------------------------------------------------------------------------------------------------------------------------------------    
    ImgNo := KeyPadImg.GetImage(0);
    room.xy1.y += KeyButton_Height;
    room.xy2.y += KeyButton_Height;
    bRet := add_key(pic$^_MY_PICTURE, #style, #room, ImgNo, NIL, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, _PGUP, _PGUP);
    if (bRet = true) then
      pButton := pic^$_MY_PICTURE.Ptr^$_PICTURE.mask.membutton.ptr + (pic^$_MY_PICTURE.Ptr^$_PICTURE.mask.membutton.no-1) * sizeof(_BUTTON);

      ImgNo  := KeyPadImg.GetImage(1);

      pButton^.buttonimages.image_press     := ImgNo$UINT;
      pButton^.buttonimages.image_in_press  := ImgNo$UINT;
      pButton^.buttonimages.image_sel_press := ImgNo$UINT;
    end_if;



    // ----------------------------------------------------------------------------------------------------------------------------------------------------
    // - KEY DEC
    // ----------------------------------------------------------------------------------------------------------------------------------------------------    
    ImgNo := KeyPadImg.GetImage(2);
    room.xy1.y += KeyButton_Height;
    room.xy2.y += KeyButton_Height;
    bRet := add_key(pic$^_MY_PICTURE, #style, #room, ImgNo, NIL, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, _PGDOWN, _PGDOWN);
    if (bRet = true) then
      pButton := pic^$_MY_PICTURE.Ptr^$_PICTURE.mask.membutton.ptr + (pic^$_MY_PICTURE.Ptr^$_PICTURE.mask.membutton.no-1) * sizeof(_BUTTON);

      ImgNo  := KeyPadImg.GetImage(3);

      pButton^.buttonimages.image_press     := ImgNo$UINT;
      pButton^.buttonimages.image_in_press  := ImgNo$UINT;
      pButton^.buttonimages.image_sel_press := ImgNo$UINT;
    end_if;



    // ----------------------------------------------------------------------------------------------------------------------------------------------------
    // - KEY ENTER
    // ----------------------------------------------------------------------------------------------------------------------------------------------------    
    ImgNo := KeyPadImg.GetImage(5);
    room.xy1.y += KeyButton_Height;
    room.xy2.y += KeyButton_Height;
    bRet := add_key(pic$^_MY_PICTURE, #style, #room, ImgNo, NIL, sizeof(_ASCII), T_CENTERBOUND or T_MIDBOUND, _ENTER, _ENTER);
    if (bRet = true) then
      pButton := pic^$_MY_PICTURE.Ptr^$_PICTURE.mask.membutton.ptr + (pic^$_MY_PICTURE.Ptr^$_PICTURE.mask.membutton.no-1) * sizeof(_BUTTON);

      ImgNo  := KeyPadImg.GetImage(6);

      pButton^.buttonimages.image_press     := ImgNo$UINT;
      pButton^.buttonimages.image_in_press  := ImgNo$UINT;
      pButton^.buttonimages.image_sel_press := ImgNo$UINT;
    end_if;



    // ----------------------------------------------------------------------------------------------------------------------------------------------------
    // - INPUT
    // ----------------------------------------------------------------------------------------------------------------------------------------------------    
    setup_STYLESHEET(#style, #pdkp^.StandardFontSchemeName[0], FRAME_STEALTH, T_CENTERBOUND or T_MIDBOUND or T_INVERTTHEME, LIGHTGRAY, WHITE, LIGHTGRAY, WHITE, DARKGRAY, NIL, NIL, NIL, NIL, NIL);
    room.xy1.x := KEYPAD_NUM_INPUT_XOFF;
    room.xy1.y := KEYPAD_NUM_INPUT_YOFF;
    room.xy2.x := room.xy1.x + (KeyPad_Width - (2 * KEYPAD_NUM_INPUT_XOFF) - 1);
    room.xy2.y := room.xy1.y + (KEYPAD_NUM_INPUT_HEIGHT-1);
    add_input(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, VARNO_EDITORDUMMY, AS_NUMERIC, DEFSCOPE);



    // ----------------------------------------------------------------------------------------------------------------------------------------------------
    // - TITLE TEXT
    // ----------------------------------------------------------------------------------------------------------------------------------------------------    
    if(pdkp^.TitleColorText$UINT <> INVISIBLE) then
      setup_STYLESHEET(#style, #pdkp^.SmallFontSchemeName[0], FRAME_NONE, T_LEFTBOUND or T_MIDBOUND, INVISIBLE, pdkp^.TitleColorText, INVISIBLE, INVISIBLE, INVISIBLE, NIL, NIL, NIL, NIL, NIL);
      room.xy1.x := KEYPAD_NUM_TITLE_XOFF;
      room.xy1.y := KEYPAD_NUM_TITLE_YOFF;
      room.xy2.x := room.xy1.x + (KeyPad_Width - (2 * KEYPAD_NUM_INPUT_XOFF) - KEYPAD_NUM_ESC_WIDTH - 1);
      room.xy2.y := room.xy1.y + (KEYPAD_NUM_TITLE_HEIGHT-1);
      init_ANYPARA(#any);
      any.anything.list := VARTXT1;
      any.anything.no   := VARNO_EDITORDUMMY;
      add_text(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, #any, NIL, sizeof(_ASCII), DEFSCOPE);
      free_ANYPARA(#any);
    end_if;



    if (pdkp^.LimitColorText$UINT <> INVISIBLE) then

      LimitUnitWidth := (KeyPad_Width - (2 * KEYPAD_NUM_LIMIT_XOFF) - 10) / 2;
      if (LimitUnitWidth > (KEYPAD_NUM_LIMIT_WIDTH + KEYPAD_NUM_UNIT_WIDTH)) then
        LimitWidth := KEYPAD_NUM_LIMIT_WIDTH;
        UnitWidth  := KEYPAD_NUM_UNIT_WIDTH;
      else
        LimitWidth := (KEYPAD_NUM_LIMIT_WIDTH * LimitUnitWidth) / (KEYPAD_NUM_LIMIT_WIDTH + KEYPAD_NUM_UNIT_WIDTH);
        UnitWidth  := LimitUnitWidth - LimitWidth;
      end_if;

      // ----------------------------------------------------------------------------------------------------------------------------------------------------
      // - LO LIMIT
      // ----------------------------------------------------------------------------------------------------------------------------------------------------
      setup_STYLESHEET(#style, #pdkp^.SmallFontSchemeName[0], FRAME_NONE, T_RIGHTBOUND or T_MIDBOUND, INVISIBLE, pdkp^.LimitColorText, INVISIBLE, INVISIBLE, INVISIBLE, NIL, NIL, NIL, NIL, NIL);
      room.xy1.x := KEYPAD_NUM_LIMIT_XOFF;
      room.xy1.y := KEYPAD_NUM_LIMIT_YOFF;
      room.xy2.x := room.xy1.x + (LimitWidth-1);
      room.xy2.y := room.xy1.y + (KEYPAD_NUM_LIMIT_HEIGTH-1);    
      init_ANYPARA(#any);
      any.anything.list := VARLIMIT_LO;
      any.anything.no   := VARNO_EDITORDUMMY;
      add_text(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, #any, NIL, sizeof(_ASCII), DEFSCOPE);
      free_ANYPARA(#any);

      // ----------------------------------------------------------------------------------------------------------------------------------------------------
      // - UNIT TEXT LO LIMIT
      // ----------------------------------------------------------------------------------------------------------------------------------------------------
      setup_STYLESHEET(#style, #pdkp^.SmallFontSchemeName[0], FRAME_NONE, T_LEFTBOUND or T_MIDBOUND, INVISIBLE, pdkp^.LimitColorText, INVISIBLE, INVISIBLE, INVISIBLE, NIL, NIL, NIL, NIL, NIL);
      room.xy1.x += LimitWidth;
      room.xy2.x := room.xy1.x + (UnitWidth-1);    
      init_ANYPARA(#any);
      any.anything.list := VARUNIT;
      any.anything.no   := VARNO_EDITORDUMMY;
      add_text(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, #any, NIL, sizeof(_ASCII), DEFSCOPE);
      free_ANYPARA(#any);



      // ----------------------------------------------------------------------------------------------------------------------------------------------------
      // - UNIT TEXT HI LIMIT
      // ----------------------------------------------------------------------------------------------------------------------------------------------------
      setup_STYLESHEET(#style, #pdkp^.SmallFontSchemeName[0], FRAME_NONE, T_LEFTBOUND or T_MIDBOUND, INVISIBLE, pdkp^.LimitColorText, INVISIBLE, INVISIBLE, INVISIBLE, NIL, NIL, NIL, NIL, NIL);
      room.xy2.x := (KeyPad_Width-1) - KEYPAD_NUM_LIMIT_XOFF;
      room.xy1.x := room.xy2.x - UnitWidth + 1;
      init_ANYPARA(#any);
      any.anything.list := VARUNIT;
      any.anything.no   := VARNO_EDITORDUMMY;
      add_text(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, #any, NIL, sizeof(_ASCII), DEFSCOPE);
      free_ANYPARA(#any);

      // ----------------------------------------------------------------------------------------------------------------------------------------------------
      // - HI LIMIT
      // ----------------------------------------------------------------------------------------------------------------------------------------------------
      setup_STYLESHEET(#style, #pdkp^.SmallFontSchemeName[0], FRAME_NONE, T_RIGHTBOUND or T_MIDBOUND, INVISIBLE, pdkp^.LimitColorText, INVISIBLE, INVISIBLE, INVISIBLE, NIL, NIL, NIL, NIL, NIL);
      room.xy1.x -= LimitWidth;
      room.xy2.x := room.xy1.x + (LimitWidth-1);
      init_ANYPARA(#any);
      any.anything.list := VARLIMIT_HI;
      any.anything.no   := VARNO_EDITORDUMMY;
      add_text(pic$^_MY_PICTURE, #style, #room, DEFSCOPE, #any, NIL, sizeof(_ASCII), DEFSCOPE);
      free_ANYPARA(#any);

    end_if;

    free_STYLESHEET(#style);
  end_if;
  
END_FUNCTION
