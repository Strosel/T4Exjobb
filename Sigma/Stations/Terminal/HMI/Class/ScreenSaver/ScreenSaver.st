//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "ScreenSaver"
	Revision           = "1.13"
	GUID               = "{095A2B2F-C915-4CBE-BC87-32FC19973850}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(600,300)"
	Comment            = "Handles the screensaver and &#13;&#10;the backlight of different PLCs. ">
	<Channels>
		<Server Name="sDeactivateScreenSaver" GUID="{881F7F2B-858C-40D9-B407-C27667E6D495}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false" Comment="Deactivate the ScreenSaver and&#13;&#10;turn on the Backlight"/>
		<Server Name="sDelayBacklight" GUID="{C7331A94-E56D-4651-A3C1-087A1FAA3F24}" Visualized="true" Initialize="true" DefValue="30sec" WriteProtected="false" Retentive="File" Comment="DelayTime in [ms]. Time starts &#13;&#10;if the screen saver &#13;&#10;starts.&#13;&#10; 0... Disabled&#13;&#10;&gt;0 .. Enabled"/>
		<Server Name="sDelayScreenSaver" GUID="{E0810584-0BA8-4A6A-8B5F-F8DF4FA3A4C7}" Visualized="true" Initialize="true" DefValue="30sec" WriteProtected="false" Retentive="File" Comment="DelayTime in [ms]"/>
		<Client Name="BrightnessMinStart" Required="true" Internal="false" Comment="Brightness minimum value (0 .. 100%), will be checked in startup phase"/>
		<Client Name="DisplaySettings" Required="true" Internal="true"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek"/>
		<Dokumentation Revision="1.13" Date="2017-10-18" Author="SprDie" Company="Sigmatek" Description="when sDelayScreenSaver is not set then configured backlight-time will now be handled&#13;&#10;otherwise behavior will be the same as in older versions"/>
		<Dokumentation Revision="1.12" Date="2017-01-10" Author="KaiAnd" Company="Sigmatek" Description="new Client &quot;BrightnessMinStart&quot; for checking the minimum value of brightness in startup phase"/>
		<Dokumentation Revision="1.11" Date="2014-07-10" Author="HlaWol" Company="Sigmatek" Description="Initvalue of Server Brightness (internal Object DisplaySettings) changed from 0 to 100 -&gt; Display is englighted in inital setup"/>
		<Dokumentation Revision="1.10" Date="2013-08-20" Author="schmar" Company="Sigmatek" Description="Removed embeded objects : Backlight_CIPC ; Backlight_ETV&#13;&#10;inserted embeded object : DisplaySettings"/>
		<Dokumentation Revision="1.0" Date="2012-01-30" Author="spimar" Company="Sigmatek" Description="Creation of class;"/>
	</RevDoku>
	<Network Name="ScreenSaver">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{AAFE80E0-C9E6-493D-A011-6DAD121BFAF3}"
				Class      = "_Global"
				Position   = "(218,120)"
				Visualized = "true">
				<Channels>
					<Server Name="Server0"/>
					<Client Name="Lse"/>
				</Channels>
			</Object>
			<Object
				Name           = "DisplaySettings"
				GUID           = "{610B353F-145A-4A20-9B3B-E85D152B9433}"
				Class          = "DisplaySettings"
				Position       = "(120,450)"
				Visualized     = "true"
				CyclicTime     = "8 ms"
				BackgroundTime = "always">
				<Channels>
					<Server Name="Brightness" Value="100"/>
					<Server Name="ClassState"/>
					<Server Name="LogoBluePWM"/>
					<Server Name="LogoGreenPWM"/>
					<Server Name="LogoRedPWM"/>
					<Server Name="State"/>
					<Server Name="SwitchBacklight"/>
					<Client Name="To_Can"/>
					<Client Name="To_Graphix"/>
					<Client Name="To_OSKernel"/>
					<Client Name="To_TaskObjectControl"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Server0" Destination="_base.Server0" Vertices="(938,210),(518,210),"/>
			<Connection Source="_base.Lse" Destination="this.Lse" Vertices="(218,210),(38,210),"/>
			<Connection Source="this.DisplaySettings" Destination="DisplaySettings.State"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using _Global

ScreenSaver : CLASS
: _Global
  //Servers:
	sDelayScreenSaver 	: SvrCh_UDINT;
	sDelayBacklight 	: SvrCh_UDINT;
	sDeactivateScreenSaver 	: SvrCh_DINT;
  //Clients:
	DisplaySettings 	: CltChCmd_DisplaySettings;
	BrightnessMinStart 	: CltCh_DINT;
  //Variables:
		dState_ScreenSaver 	: DINT;			//! <Variable Comment="Shows the state of the screensaver" Name="dState_ScreenSaver"/>
		udTimeStamp 	: UDINT;			//! <Variable Comment="Contains timestamp of ops.tabsolute" Name="udTimeStamp"/>
		bBackLightOff 	: BOOL;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL IF_WindowRun
		VAR_INPUT
			whoami 	: ^_WHOAMI;
			pic 	: ^void;
			event 	: ^_EVENT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL IF_ProjectReady
		VAR_INPUT
			state 	: BOOL;
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL IF_ScreenSaverWillStart
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL IF_ScreenSaverWillEnd
		VAR_INPUT
			pev 	: ^_EVENT;
		END_VAR
		VAR_OUTPUT
			retcode 	: BOOL;
		END_VAR;
				//! <Function Comment="Turns on the backlight&#13;&#10;of different PLCs" Name="SetBacklightOn"/>
	FUNCTION SetBacklightOn;
				//! <Function Comment="Turns off the backlight&#13;&#10;of different PLCs" Name="SetBacklightOff"/>
	FUNCTION SetBacklightOff;
	
	FUNCTION VIRTUAL GLOBAL sDelayScreenSaver::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sDelayBacklight::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using DisplaySettings


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB ScreenSaver::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_SCREENSAVER
1$UINT, 13$UINT, (SIZEOF(::ScreenSaver))$UINT, 
3$UINT, 2$UINT, 0$UINT, 
TO_UDINT(3719262472), "ScreenSaver", //Class
TO_UDINT(3788417926), "_Global", 0$UINT, 14$UINT, //Baseclass
//Servers:
(::ScreenSaver.sDelayScreenSaver.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(3489441712), "sDelayScreenSaver", 
(::ScreenSaver.sDelayBacklight.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(2288866241), "sDelayBacklight", 
(::ScreenSaver.sDeactivateScreenSaver.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2910311889), "sDeactivateScreenSaver", 
//Clients:
(::ScreenSaver.DisplaySettings.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3306153856), "DisplaySettings", TO_UDINT(3306153856), "DisplaySettings", 1$UINT, 37$UINT, 
(::ScreenSaver.BrightnessMinStart.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3231907216), "BrightnessMinStart", 
END_FUNCTION


#define USER_CNT_ScreenSaver 44

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_ScreenSaver] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION ScreenSaver::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= _Global::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _Global::Server0.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _Global::Server0.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_ScreenSaver;
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #IF_WindowRun();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[13]		:= #IF_ProjectReady();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[37]		:= #IF_ScreenSaverWillStart();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[38]		:= #IF_ScreenSaverWillEnd();

#pragma warning (default : 74)
	_Global::Server0.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _Global::Server0.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sDelayScreenSaver.pMeth			:= StoreMethod( #M_RD_DIRECT(), #sDelayScreenSaver::Write() );
	IF sDelayScreenSaver.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sDelayBacklight.pMeth			:= StoreMethod( #M_RD_DIRECT(), #sDelayBacklight::Write() );
	IF sDelayBacklight.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sDeactivateScreenSaver.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF sDeactivateScreenSaver.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION ScreenSaver::SetBacklightOn

  // Turns on the backlight 
  
  DisplaySettings.SwitchBacklight.Write(input := 1);

END_FUNCTION

FUNCTION ScreenSaver::SetBacklightOff

  // Turns off the backlight 

  DisplaySettings.SwitchBacklight.Write(input := 0);

END_FUNCTION

FUNCTION VIRTUAL GLOBAL ScreenSaver::sDelayScreenSaver::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

  // write the delay to the LSE kernel
	sDelayScreenSaver := input;
  Lse.DelayScreenSaver.Write(input:=sDelayScreenSaver);
 	result := sDelayScreenSaver;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL ScreenSaver::IF_ProjectReady
	VAR_INPUT
		state 	: BOOL;
	END_VAR
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR

  // write delay to LSE kernel if the project is ready
  Lse.DelayScreenSaver.Write(input:=sDelayScreenSaver);
  retcode := state;

  //---------------------------------------------------------------------------
  // check the min.value of brightness                                V.1.12
  //---------------------------------------------------------------------------
  BrightnessMinStart := BrightnessMinStart.Read();
  if (BrightnessMinStart < 0) then
    BrightnessMinStart := 0;
  elsif (BrightnessMinStart > 100) then
    BrightnessMinStart := 100;
  end_if;
  BrightnessMinStart.Write(input:=BrightnessMinStart);

  if (DisplaySettings.Brightness < BrightnessMinStart) then
    DisplaySettings.Brightness.Write(input:=BrightnessMinStart);
  end_if;
//---------------------------------------------------------------------------
  
END_FUNCTION

FUNCTION VIRTUAL GLOBAL ScreenSaver::IF_ScreenSaverWillStart
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR

  // set the timestamp to turn off the backlight after time elapsed 
  udTimeStamp := ops.tAbsolute;
  dState_ScreenSaver :=0;
  retcode := true;

END_FUNCTION

#pragma warning(disable: 73)
FUNCTION VIRTUAL GLOBAL ScreenSaver::IF_ScreenSaverWillEnd
	VAR_INPUT
		pev 	: ^_EVENT;
	END_VAR
	VAR_OUTPUT
		retcode 	: BOOL;
	END_VAR

  // turns on the backlight if the screensaver ends
  SetBacklightOn();
  retcode := true;

END_FUNCTION
#pragma warning(default: 73)

FUNCTION VIRTUAL GLOBAL ScreenSaver::IF_WindowRun
	VAR_INPUT
		whoami 	: ^_WHOAMI;
		pic 	: ^void;
		event 	: ^_EVENT;
	END_VAR
  
  if sDelayScreenSaver > 0 then
    
    // v1.13 - ScreenSaver-Time is set so wait for activated ScreenSaver
    if (whoami^.ima = IMA_SCREENSAVER) then
      case dState_ScreenSaver of

        0 : if (sDelayBacklight > 0) then
              if (ops.tAbsolute - udTimeStamp >= sDelayBacklight) then
                dState_ScreenSaver +=1;
                SetBacklightOff();
              end_if;
            end_if;

      end_case;

      if (sDeactivateScreenSaver <> 0) then
        // Deactivate the Screensaver and turns on the backlight
        sDeactivateScreenSaver :=0;
        reset_screensaver();
        SetBacklightOn();
      end_if;

    end_if;
  
  else
  
    // v1.13 - handle backlight time if sDelayScreenSaver is not set
    if sDelayBacklight > 0 then
      if bBackLightOff = FALSE then
        
        if event^.ftype <> _EVENT_NONE then
          // reset timestamp
          udTimeStamp := ops.tAbsolute;
        end_if;
        
        if (ops.tAbsolute - udTimeStamp) > sDelayBacklight then
          // timeout -> deactivate Backlight
          SetBacklightOff();
          bBackLightOff := TRUE;
        end_if;
      
      else
      
        if event^.ftype <> _EVENT_NONE then
          // event occured -> wake up
          SetBacklightOn();
          bBackLightOff := FALSE;
          udTimeStamp := ops.tAbsolute;
        end_if;
      
      end_if;
    end_if;
  
  end_if;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL ScreenSaver::sDelayBacklight::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sDelayBacklight := input;
  
  // v1.13 - also handle Backlight-Time when no ScreenSaver-Time is set
  if sDelayScreenSaver = 0 then
    udTimeStamp := ops.tAbsolute;
  end_if;
  
	result := sDelayBacklight;

END_FUNCTION
