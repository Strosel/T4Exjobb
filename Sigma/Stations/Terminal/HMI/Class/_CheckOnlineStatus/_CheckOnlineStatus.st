//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "_CheckOnlineStatus"
	Revision           = "1.3"
	GUID               = "{BFC3B5B6-B0D3-4E04-B131-B32FE53707BC}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "50 ms"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(600,180)"
	Comment            = "class for checking/alarming the online status">
	<Channels>
		<Server Name="Locked" GUID="{B63077B4-0B51-4AFC-B86A-334A091E495A}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="0 ... communication never was online&#13;&#10;1 ... communication was online"/>
		<Server Name="RestTime" GUID="{B32980CF-EF55-4B99-9766-3FA25468469F}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="rest time until alarm will be generated [millisec] (output)"/>
		<Client Name="AlarmCommunication" Required="true" Internal="false" Comment="alarm number for PLC offline alarm (input)"/>
		<Client Name="DelayTime" Required="true" Internal="false" DefValue="20000" Comment="delay time for alarm generating [millisec] (input)"/>
		<Client Name="toTCPComm" Required="true" Internal="false" Comment="Object channel to TCPCommunication."/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\_CheckOnlineStatus\_CheckOnlineStatus_de.pdf"/>
			<File Path=".\Class\_CheckOnlineStatus\_CheckOnlineStatus_en.pdf"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="Sigmatek"/>
		<Dokumentation Revision="1.3" Date="2017-01-05" Author="HasHan" Company="Sigmatek" Description="removed the embedded alarmobject to change it for the opmodehandling"/>
		<Dokumentation Revision="1.2" Date="2016-11-04" Author="KaiAnd" Company="Sigmatek" Description="building the locked flag: Wait for first online status AND communication after system start (not only online status)&#13;&#10;also an optional timeDelay is implemented for the alarm generating"/>
		<Dokumentation Revision="1.1" Date="2016-10-10" Author="HubChr" Company="Sigmatek" Description="Added documentation pdfs."/>
		<Dokumentation Revision="1.0" Date="2015-06-24" Company="Sigmatek" Description="Creation."/>
	</RevDoku>
</Class>
*)
_CheckOnlineStatus : CLASS
  //Servers:
	Locked 	: SvrChCmd_DINT;
	RestTime 	: SvrCh_UDINT;
  //Clients:
	toTCPComm 	: CltChCmd_TCPCommunication;
	AlarmCommunication 	: CltCh_DINT;
	DelayTime 	: CltCh_UDINT;
  //Variables:
		TimeMarkAlarm 	: UDINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd TCPCommunication


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _CheckOnlineStatus::@CT_
0$UINT,
2#0100000000000000$UINT, //TY__CHECKONLINESTATUS
1$UINT, 3$UINT, (SIZEOF(::_CheckOnlineStatus))$UINT, 
2$UINT, 3$UINT, 0$UINT, 
TO_UDINT(3900434542), "_CheckOnlineStatus", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::_CheckOnlineStatus.Locked.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(438963991), "Locked", 
(::_CheckOnlineStatus.RestTime.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1541327027), "RestTime", 
//Clients:
(::_CheckOnlineStatus.toTCPComm.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3767705459), "toTCPComm", TO_UDINT(3704218787), "TCPCommunication", 1$UINT, 14$UINT, 
(::_CheckOnlineStatus.AlarmCommunication.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2051489927), "AlarmCommunication", 
(::_CheckOnlineStatus.DelayTime.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(249777087), "DelayTime", 
END_FUNCTION


#define USER_CNT__CheckOnlineStatus 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__CheckOnlineStatus] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _CheckOnlineStatus::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT__CheckOnlineStatus, pCmd := #vmt.CmdTable);
	vmt.CmdTable.CyWork		:= #CyWork();
	Locked.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Locked.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL _CheckOnlineStatus::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
  VAR
  	myOnlineWarning : DINT;
  	myOnlineAlarm   : DINT;
  END_VAR
  
  //-----------------------------------------------------------------
  //  INIT
  //-----------------------------------------------------------------
  DelayTime := DelayTime.Read();
  myOnlineWarning := 0;
  myOnlineAlarm   := 0;

  //-----------------------------------------------------------------
  //  Online-Alarm:
  //-----------------------------------------------------------------

  // online and communication ... Status OK!
  if ( (toTCPComm.Online <> 0) & 
       (toTCPComm.TransferRateReceive <> 0) ) then
    Locked := 1;      // Communication was online after system start

//  elsif (locked = 1) then
  else
    myOnlineWarning := 1;
  end_if;

  //-----------------------------------------------------------------
  //  building the alarm with delayTimer
  //-----------------------------------------------------------------
  
  // no online warning
  if (myOnlineWarning = 0) then
    TimeMarkAlarm := ops.tAbsolute;

  // online warning!
  else
    // time delay
    if ((ops.tAbsolute - TimeMarkAlarm) >= DelayTime) then
      myOnlineAlarm := 1;   // set alarm
    end_if;
  end_if;

  // write status to alarm server
  if (AlarmCommunication.Read() <> myOnlineAlarm) then
    AlarmCommunication.Write(input:=myOnlineAlarm);
  end_if;

  // write rest time to server
  RestTime := DelayTime - (ops.tAbsolute - TimeMarkAlarm);
  if (RestTime$DINT < 0) then
    RestTime := 0;
  end_if;

  //-----------------------------------------------------------------

	state := READY;

END_FUNCTION
