//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION
#include "..\..\Class\AlarmTitleLine\Alarms.h"

(*!
<Class
	Name               = "AlarmTitleLine"
	Revision           = "1.1"
	GUID               = "{52FEF266-85A8-4A66-93CA-8314895EDEF2}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(540,240)">
	<Channels>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\AlarmTitleLine\Alarms.h" Include="true"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="Sigmatek"/>
		<Dokumentation Revision="1.1" Date="2016-09-07" Author="HubChr" Company="Sigmatek" Description="Bugfix: TitleLine did not work if placed in an Object (Lasal Screen Editor)"/>
		<Dokumentation Revision="1.0" Date="2016-05-11" Author="KaiAnd" Company="Sigmatek" Description="official start release"/>
	</RevDoku>
	<Network Name="AlarmTitleLine">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{9FBE1808-9D98-4DC4-AA20-776CDF6B6747}"
				Class      = "TitleLine"
				Position   = "(218,120)"
				Visualized = "true">
				<Channels>
					<Server Name="Refresh"/>
					<Server Name="Server0"/>
					<Client Name="ColumnChoice"/>
					<Client Name="coSystemLogging"/>
					<Client Name="Lse"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Server0" Destination="_base.Server0" Vertices="(942,210),(770,210),"/>
			<Connection Source="this.Refresh" Destination="_base.Refresh" Vertices="(942,270),(770,270),"/>
			<Connection Source="_base.Lse" Destination="this.Lse" Vertices="(218,210),(38,210),"/>
			<Connection Source="_base.ColumnChoice" Destination="this.ColumnChoice" Vertices="(218,270),(38,270),"/>
			<Connection Source="_base.coSystemLogging" Destination="this.coSystemLogging" Vertices="(218,330),(38,330),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using TitleLine

AlarmTitleLine : CLASS
: TitleLine
  //Servers:
  //Clients:
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL TableLines
		VAR_INPUT
			pio 	: ^_IO;
		END_VAR
		VAR_OUTPUT
			bSuccessful 	: BOOL;
		END_VAR;
	
	FUNCTION VIRTUAL DrawHeader
		VAR_INPUT
			pio 	: ^_IO;
		END_VAR
		VAR_OUTPUT
			bSuccessful 	: BOOL;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB AlarmTitleLine::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_ALARMTITLELINE
1$UINT, 1$UINT, (SIZEOF(::AlarmTitleLine))$UINT, 
0$UINT, 0$UINT, 0$UINT, 
TO_UDINT(718326546), "AlarmTitleLine", //Class
TO_UDINT(112430022), "TitleLine", 1$UINT, 3$UINT, //Baseclass
//Servers:
//Clients:
END_FUNCTION


#define USER_CNT_AlarmTitleLine 19

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_AlarmTitleLine] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION AlarmTitleLine::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= TitleLine::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _MyIO::Server0.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _MyIO::Server0.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_AlarmTitleLine;
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[17]		:= #TableLines();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[18]		:= #DrawHeader();

#pragma warning (default : 74)
	_MyIO::Server0.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _MyIO::Server0.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL AlarmTitleLine::Init

  // Methode der Basis-Klasse
  TitleLine::Init();

END_FUNCTION


FUNCTION VIRTUAL AlarmTitleLine::DrawHeader
	VAR_INPUT
		pio 	: ^_IO;
	END_VAR
	VAR_OUTPUT
		bSuccessful 	: BOOL;
	END_VAR
  VAR
    pString  : ^_CHAR;
    tmpRoom  : _ROOM;
    fieldHight      : INT;
    fontWidth       : UINT;
    fontHight       : UINT;
  END_VAR;
  
  // Übergabeparameter prüfen
  if pio = NIL then
    bSuccessful := false;
    return;
  else
    bSuccessful := true;
  end_if;
  
  // Bestimmen der Position des Texts (Zentriert im Feld)
  fieldHight := pio^.space.xy2.y - pio^.space.xy1.y;      // HubChr v1.1 use pio^.space instead of pio^.room
  font_size(x0:=pio^.font, p1:=#fontWidth, p2:=#fontHight);

  tmpRoom.xy1.x := ScrollOffset - 1;
  tmpRoom.xy1.y := pio^.space.xy1.y + ((fieldHight / 2) - (fontHight$INT / 2));  // HubChr v1.1 use pio^.space instead of pio^.room
  tmpRoom.xy2.x := ScrollOffset-1;
  tmpRoom.xy2.y := tmpRoom.xy1.y + fontHight$INT; 

  // Prüfen ob Alarmnummer dargestellt werden soll
  //-----------------------------------------------------------------------------------------
  if ColumnChoice AND 2#1000 then

    // Alarmnummer holen
    pString$^void := NewDoScheme(x0 := TEXTSCHEME, 
                                 x1 := 1, 
                                 x2 := ExtVisPara.ParaTextscheme.no );            
    if pString = NIL then
      if (IsCon_coSystemLogging = True) then    // KaiAnd
        coSystemLogging.LogEventText("AlarmTitle::DrawHeader(): Keinen Text (Alarmnummer) gefunden");
      end_if;
    else
      // Koordinaten bestimmen
      tmpRoom.xy1.x := tmpRoom.xy1.x + 5;
      tmpRoom.xy2.x := tmpRoom.xy1.x + to_int(aColumnWidths[0]) - 5;
      
      // Text ausgeben
      OutTextAlign( p0 := pString, 
                    x1 := 0,
                    p1 := #tmpRoom, 
                    x2 := pio^.font, 
                    x3 := T_SOLID OR T_COPY OR T_PROP OR T_CENTERBOUND OR T_MIDBOUND, // KaiAnd V.1.0; instead of "pio^.attrib"
                    x9 := _DEFFRAME, 
                    x4 := pio^.coltxt, 
                    x5 := INVISIBLE, 
                    x6 := NIL$_COLOR, 
                    x7 := sizeof(_CHAR));
    end_if;
    
  end_if;
  
  
  // Prüfen ob Eventzeit dargestellt werden soll
  //-----------------------------------------------------------------------------------------
  if ColumnChoice AND 2#0100 then
  
    // Eventzeit holen -> gekommen
    pString$^void := NewDoScheme(x0 := TEXTSCHEME, 
                                 x1 := 2, 
                                 x2 := ExtVisPara.ParaTextscheme.no );            
    if pString = NIL then
      if (IsCon_coSystemLogging = True) then    // KaiAnd
        coSystemLogging.LogEventText("AlarmTitle::DrawHeader(): Keinen Text (Eventzeit) gefunden");
      end_if;
    else
      // Koordinaten bestimmen
      tmpRoom.xy1.x := tmpRoom.xy2.x + 5;
      tmpRoom.xy2.x := tmpRoom.xy1.x + to_int(aColumnWidths[1]) - 5;
      tmpRoom.xy1.y := pio^.space.xy1.y + (((fieldHight / 2) - fontHight$INT) - 2);  // HubChr v1.1 use pio^.space instead of pio^.room
      tmpRoom.xy2.y := tmpRoom.xy1.y + fontHight$INT;
      
      // Text ausgeben
      OutTextAlign( p0 := pString, 
                    x1 := 0,
                    p1 := #tmpRoom, 
                    x2 := pio^.font, 
                    x3 := T_SOLID OR T_COPY OR T_PROP OR T_CENTERBOUND OR T_MIDBOUND, // KaiAnd V.1.0; instead of "pio^.attrib" 
                    x9 := _DEFFRAME, 
                    x4 := pio^.coltxt, 
                    x5 := INVISIBLE, 
                    x6 := NIL$_COLOR, 
                    x7 := sizeof(_CHAR));
      
    end_if;
    
    // Eventzeit holen - gegangen
    pString$^void := NewDoScheme(x0 := TEXTSCHEME, 
                                 x1 := 3, 
                                 x2 := ExtVisPara.ParaTextscheme.no );            
    if pString = NIL then
      if (IsCon_coSystemLogging = True) then    // KaiAnd
        coSystemLogging.LogEventText("AlarmTitle::DrawHeader(): Keinen Text (Eventzeit) gefunden");
      end_if;
    else
      
      tmpRoom.xy1.y := pio^.space.xy1.y + ((fieldHight / 2) + 2);  // HubChr v1.1 use pio^.space instead of pio^.room
      tmpRoom.xy2.y := tmpRoom.xy1.y + fontHight$INT;
      
      // Text ausgeben
      OutTextAlign( p0 := pString, 
                    x1 := 0,
                    p1 := #tmpRoom, 
                    x2 := pio^.font, 
                    x3 := T_SOLID OR T_COPY OR T_PROP OR T_CENTERBOUND OR T_MIDBOUND, // KaiAnd V.1.0; instead of "pio^.attrib" 
                    x9 := _DEFFRAME, 
                    x4 := pio^.coltxt, 
                    x5 := INVISIBLE, 
                    x6 := NIL$_COLOR, 
                    x7 := sizeof(_CHAR));
      
    end_if;
    
  end_if;
  
  // y Koordinaten wieder korrigieren
  tmpRoom.xy1.y := pio^.space.xy1.y + ((fieldHight / 2) - (fontHight$INT / 2));  // HubChr v1.1 use pio^.space instead of pio^.room
  tmpRoom.xy2.y := tmpRoom.xy1.y + fontHight$INT;
  
  
  // Prüfen ob Zyklusnummer dargestellt werden soll
  //-----------------------------------------------------------------------------------------
  if ColumnChoice AND 2#0010 then
  
    // Zyklusnummer holen
    pString$^void := NewDoScheme(x0 := TEXTSCHEME, 
                                 x1 := 4, 
                                 x2 := ExtVisPara.ParaTextscheme.no );            
    if pString = NIL then
      if (IsCon_coSystemLogging = True) then    // KaiAnd
        coSystemLogging.LogEventText("AlarmTitle::DrawHeader(): Keinen Text (Zyklusnummer) gefunden");
      end_if;
    else
      // Koordinaten bestimmen
      tmpRoom.xy1.x := tmpRoom.xy2.x + 5;
      tmpRoom.xy2.x := tmpRoom.xy1.x + to_int(aColumnWidths[2]) - 5;
      
      
      // Text ausgeben
      OutTextAlign( p0 := pString, 
                    x1 := 0,
                    p1 := #tmpRoom, 
                    x2 := pio^.font, 
                    x3 := T_SOLID OR T_COPY OR T_PROP OR T_CENTERBOUND OR T_MIDBOUND, // KaiAnd V.1.0; instead of "pio^.attrib" 
                    x9 := _DEFFRAME, 
                    x4 := pio^.coltxt, 
                    x5 := INVISIBLE, 
                    x6 := NIL$_COLOR, 
                    x7 := sizeof(_CHAR));
    end_if;
    
  end_if;
  
  
  // Prüfen ob Beschreibung dargestellt werden soll
  //-----------------------------------------------------------------------------------------
  if ColumnChoice AND 2#0001 then
  
    // Beschreibung holen
    pString$^void := NewDoScheme(x0 := TEXTSCHEME, 
                                 x1 := 5, 
                                 x2 := ExtVisPara.ParaTextscheme.no );            
    if pString = NIL then
      if (IsCon_coSystemLogging = True) then    // KaiAnd
        coSystemLogging.LogEventText("AlarmTitle::DrawHeader(): Keinen Text (Beschreibung) gefunden");
      end_if;
    else
      // Koordinaten bestimmen
      tmpRoom.xy1.x := tmpRoom.xy2.x + 5;
      tmpRoom.xy2.x := tmpRoom.xy1.x + to_int(aColumnWidths[3]) - 5;
      
      // Text ausgeben
      OutTextAlign( p0 := pString, 
                    x1 := 0,
                    p1 := #tmpRoom, 
                    x2 := pio^.font, 
                    x3 := T_LEFTBOUND or T_SOLID or T_PROP or T_COPY or T_MIDBOUND, 
                    x9 := _DEFFRAME, 
                    x4 := pio^.coltxt, 
                    x5 := INVISIBLE, 
                    x6 := NIL$_COLOR, 
                    x7 := sizeof(_CHAR));
    end_if;
    
  end_if;

END_FUNCTION


FUNCTION VIRTUAL AlarmTitleLine::TableLines
	VAR_INPUT
		pio 	: ^_IO;
	END_VAR
	VAR_OUTPUT
		bSuccessful 	: BOOL;
	END_VAR
  VAR
    tmpRoom   : _ROOM;
    fieldHight : INT;
  END_VAR
  
  
  // Übergabeparameter prüfen
  if pio = NIL then
    bSuccessful := false;
    return;
  else
    bSuccessful := true;
  end_if;
  
  // ermitteln der höhe des platzierten objects
  fieldHight := pio^.room.xy2.y - pio^.room.xy1.y;
  
  // Bereich definieren
  tmpRoom.xy1.x := ScrollOffset;
  tmpRoom.xy1.y := pio^.room.xy1.y;
  tmpRoom.xy2.x := ScrollOffset;
  tmpRoom.xy2.y := pio^.room.xy2.y;
  
  
  // Trennline zwischen Alarmnummer und Zeit
  //-----------------------------------------------------------------------------------------
  // Prüfen ob Alarmnummer dargestellt werden soll
  if ColumnChoice AND 2#1000 then
    
    // Koordinaten bestimmen
    tmpRoom.xy1.x := tmpRoom.xy2.x + to_int(aColumnWidths[0]);
    tmpRoom.xy2.x := tmpRoom.xy1.x;

    Graphic.Line( x1      := tmpRoom.xy1.x, 
                  y1      := tmpRoom.xy1.y, 
                  x2      := tmpRoom.xy2.x, 
                  y2      := tmpRoom.xy2.y, 
                  attrib  := T_SOLID, 
                  color   := pio^.colframe);

  end_if;

              
  // Trennline zwischen Zeit und Zyklusnummer
  //-----------------------------------------------------------------------------------------
  // Prüfen ob Zeit dargestellt werden soll
  if ColumnChoice AND 2#0100 then
    
    // Koordinaten bestimmen
    tmpRoom.xy1.x := tmpRoom.xy2.x + to_int(aColumnWidths[1]);
    tmpRoom.xy2.x := tmpRoom.xy1.x;

    Graphic.Line( x1      := tmpRoom.xy1.x, 
                  y1      := tmpRoom.xy1.y, 
                  x2      := tmpRoom.xy2.x, 
                  y2      := tmpRoom.xy2.y, 
                  attrib  := T_SOLID, 
                  color   := pio^.colframe);

  end_if;


  // Trennline zwischen Zyklusnummer und Beschreibung
  //-----------------------------------------------------------------------------------------
  // Prüfen ob Zyklusnummer dargestellt werden soll
  if ColumnChoice AND 2#0010 then
    
    // Koordinaten bestimmen
    tmpRoom.xy1.x := tmpRoom.xy2.x + to_int(aColumnWidths[2]);
    tmpRoom.xy2.x := tmpRoom.xy1.x;

    Graphic.Line( x1      := tmpRoom.xy1.x, 
                  y1      := tmpRoom.xy1.y, 
                  x2      := tmpRoom.xy2.x, 
                  y2      := tmpRoom.xy2.y, 
                  attrib  := T_SOLID, 
                  color   := pio^.colframe); 
  
  end_if;
  
  // Trennline zwischen Zeit gekommen und gegangen, wenn diese dargestellt werden soll
  if ColumnChoice AND 2#0100 then
    // Bereich definieren
    tmpRoom.xy1.x := ScrollOffset + to_int(aColumnWidths[0]) + 1;
    tmpRoom.xy1.y := pio^.room.xy1.y + (fieldHight / 2);
    tmpRoom.xy2.x := ScrollOffset + to_int(aColumnWidths[0]) + to_int(aColumnWidths[1]);
    tmpRoom.xy2.y := tmpRoom.xy1.y;
    
    if (ColumnChoice AND 2#1000) = false then
      tmpRoom.xy1.x := ScrollOffset + 1;
      tmpRoom.xy2.x := ScrollOffset + to_int(aColumnWidths[1]);
    end_if;
    
    Graphic.Line( x1      := tmpRoom.xy1.x, 
                  y1      := tmpRoom.xy1.y, 
                  x2      := tmpRoom.xy2.x, 
                  y2      := tmpRoom.xy2.y, 
                  attrib  := T_SOLID, 
                  color   := pio^.colframe);  
  end_if;

END_FUNCTION


